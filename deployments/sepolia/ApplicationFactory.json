{
  "address": "0x159876e08d642c2Fe9a52804756189E1DbF497F0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPortal[]",
          "name": "portals",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract Application",
          "name": "appContract",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IPortal[]",
          "name": "portals",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateApplicationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IPortal[]",
          "name": "portals",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "contract Application",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IPortal[]",
          "name": "portals",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "contract Application",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x891a20cc787aac3a57112a1a075ca1f068a680d647a9f3ac6b613375425d2789",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xB25D9D56f5877Ca869A0362c324aCC2F1465AF1B",
    "contractAddress": null,
    "transactionIndex": 82,
    "gasUsed": "1652273",
    "logsBloom": "0x
    "blockHash": "0x8f2ebe13f36963c528b5de44db3fbde087f2b109468588611ac507d19593309f",
    "transactionHash": "0x891a20cc787aac3a57112a1a075ca1f068a680d647a9f3ac6b613375425d2789",
    "logs": [],
    "blockNumber": 6099864,
    "cumulativeGasUsed": "14848930",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d5e580c56a1973c1da5089d8c687e7bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPortal[]\",\"name\":\"portals\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract Application\",\"name\":\"appContract\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IPortal[]\",\"name\":\"portals\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateApplicationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IPortal[]\",\"name\":\"portals\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"contract Application\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IPortal[]\",\"name\":\"portals\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"contract Application\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApplicationCreated(address,address,address[],address,bytes32,address)\":{\"details\":\"MUST be triggered on a successful call to `newApplication`.\",\"params\":{\"appContract\":\"The application contract\",\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"inputBox\":\"The input box contract\",\"portals\":\"The portals supported by the application\",\"templateHash\":\"The initial machine state hash\"}}},\"kind\":\"dev\",\"methods\":{\"calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)\":{\"details\":\"Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.\",\"params\":{\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"inputBox\":\"The input box contract\",\"portals\":\"The portals supported by the application\",\"salt\":\"The salt used to deterministically generate the application contract address\",\"templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The deterministic application contract address\"}},\"newApplication(address,address,address[],address,bytes32)\":{\"details\":\"On success, MUST emit an `ApplicationCreated` event.\",\"params\":{\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"inputBox\":\"The input box contract\",\"portals\":\"The portals supported by the application\",\"templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The application\"}},\"newApplication(address,address,address[],address,bytes32,bytes32)\":{\"details\":\"On success, MUST emit an `ApplicationCreated` event.\",\"params\":{\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"inputBox\":\"The input box contract\",\"portals\":\"The portals supported by the application\",\"salt\":\"The salt used to deterministically generate the application contract address\",\"templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The application\"}}},\"title\":\"Application Factory\",\"version\":1},\"userdoc\":{\"events\":{\"ApplicationCreated(address,address,address[],address,bytes32,address)\":{\"notice\":\"A new application was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)\":{\"notice\":\"Calculate the address of an application contract to be deployed deterministically.\"},\"newApplication(address,address,address[],address,bytes32)\":{\"notice\":\"Deploy a new application.\"},\"newApplication(address,address,address[],address,bytes32,bytes32)\":{\"notice\":\"Deploy a new application deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `Application` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dapp/ApplicationFactory.sol\":\"ApplicationFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"contracts/common/CanonicalMachine.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\\"Cartesi Machine\\\".\\nlibrary CanonicalMachine {\\n    /// @notice Maximum input size (2 megabytes).\\n    uint256 constant INPUT_MAX_SIZE = 1 << 21;\\n\\n    /// @notice Log of maximum number of inputs per epoch.\\n    uint256 constant LOG2_MAX_INPUTS_PER_EPOCH = 32;\\n\\n    /// @notice Log of maximum number of outputs per input.\\n    uint256 constant LOG2_MAX_OUTPUTS_PER_INPUT = 16;\\n}\\n\",\"keccak256\":\"0xad91c1e0080fd40f53def31cb87106dedef26fc506aa569f43a77b8fcdc53a77\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/InputRange.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice A range of input indices.\\n/// @param firstIndex The index of the first input\\n/// @param lastIndex The index of the last input\\nstruct InputRange {\\n    uint64 firstIndex;\\n    uint64 lastIndex;\\n}\\n\",\"keccak256\":\"0x4825516380f1fb39d5b15e99c1b08e07c636dc062ad3036093e78ba8e624cd33\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/OutputValidityProof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"./InputRange.sol\\\";\\n\\n/// @param inputRange The range of inputs accepted during the epoch\\n/// @param inputIndexWithinEpoch Which input, inside the epoch, the output belongs to\\n/// @param outputIndexWithinInput Index of output emitted by the input\\n/// @param outputHashesRootHash Merkle root of hashes of outputs emitted by the input\\n/// @param outputsEpochRootHash Merkle root of all epoch's outputs metadata hashes\\n/// @param machineStateHash Hash of the machine state claimed this epoch\\n/// @param outputHashInOutputHashesSiblings Proof that this output metadata is in metadata memory range\\n/// @param outputHashesInEpochSiblings Proof that this output metadata is in epoch's output memory range\\nstruct OutputValidityProof {\\n    InputRange inputRange;\\n    uint64 inputIndexWithinEpoch;\\n    uint64 outputIndexWithinInput;\\n    bytes32 outputHashesRootHash;\\n    bytes32 outputsEpochRootHash;\\n    bytes32 machineStateHash;\\n    bytes32[] outputHashInOutputHashesSiblings;\\n    bytes32[] outputHashesInEpochSiblings;\\n}\\n\",\"keccak256\":\"0xf60efcea5b54d6b5c659460fc205ae04b16d89c72dee86e7b2c1e1edb6a52d65\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/Outputs.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Outputs\\n/// @notice Defines the signatures of outputs that can be generated by the\\n/// off-chain machine and verified by the on-chain contracts.\\ninterface Outputs {\\n    /// @notice A piece of verifiable information.\\n    /// @param payload An arbitrary payload.\\n    function Notice(bytes calldata payload) external;\\n\\n    /// @notice A single-use permission to execute a specific message call\\n    /// from the context of the application contract.\\n    /// @param destination The address that will be called\\n    /// @param value The amount of Wei to be transferred through the call\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// contracts\\u2014encodes a function call\\n    function Voucher(\\n        address destination,\\n        uint256 value,\\n        bytes calldata payload\\n    ) external;\\n\\n    /// @notice A single-use permission to execute a specific delegate call\\n    /// from the context of the application contract.\\n    /// @param destination The address that will be called\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// libraries\\u2014encodes a function call\\n    function DelegateCallVoucher(\\n        address destination,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaee9d71104bfe2fab21d4e26f3ed802439d6c2e1bc5aeb9bfc5090f4083bd542\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice Provides data availability of epoch hashes for applications.\\n/// @notice An epoch hash is produced after the machine processes a range of inputs and the epoch is finalized.\\n/// This hash can be later used to prove that any given output was produced by the machine during the epoch.\\n/// @notice After an epoch is finalized, a validator may submit a claim containing the application contract address,\\n/// the range of inputs accepted during the epoch, and the epoch hash.\\n/// @notice Validators may synchronize epoch finalization, but such mechanism is not specified by this interface.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time.\\ninterface IConsensus {\\n    /// @notice MUST trigger when a claim is submitted.\\n    /// @param submitter The submitter address\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev Overwrites any previous submissions regarding `submitter`, `appContract` and `inputRange`.\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed appContract,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice MUST trigger when a claim is accepted.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST be triggered after some `ClaimSubmission` event regarding `appContract`, `inputRange` and `epochHash`.\\n    /// @dev Overwrites any previous acceptances regarding `appContract` and `inputRange`.\\n    event ClaimAcceptance(\\n        address indexed appContract,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST fire a `ClaimSubmission` event.\\n    /// @dev MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.\\n    function submitClaim(\\n        address appContract,\\n        InputRange calldata inputRange,\\n        bytes32 epochHash\\n    ) external;\\n\\n    /// @notice Get the epoch hash for a certain application and input range.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @return epochHash The epoch hash\\n    /// @dev For claimed epochs, must return the epoch hash of the last accepted claim.\\n    /// @dev For unclaimed epochs, MUST either revert or return `bytes32(0)`.\\n    function getEpochHash(\\n        address appContract,\\n        InputRange calldata inputRange\\n    ) external view returns (bytes32 epochHash);\\n}\\n\",\"keccak256\":\"0xd2ea451e450f6b3b01bd77b95dbb00465d263cae9285a03c8ffd0d96c4d75dc1\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/Application.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IApplication} from \\\"./IApplication.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IPortal} from \\\"../portals/IPortal.sol\\\";\\nimport {LibOutputValidityProof} from \\\"../library/LibOutputValidityProof.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\nimport {Outputs} from \\\"../common/Outputs.sol\\\";\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\nimport {LibInputRange} from \\\"../library/LibInputRange.sol\\\";\\nimport {LibAddress} from \\\"../library/LibAddress.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\ncontract Application is\\n    IApplication,\\n    Ownable,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n    using LibAddress for address;\\n    using LibOutputValidityProof for OutputValidityProof;\\n    using LibInputRange for InputRange;\\n\\n    /// @notice The initial machine state hash.\\n    /// @dev See the `getTemplateHash` function.\\n    bytes32 internal immutable _templateHash;\\n\\n    /// @notice Keeps track of which outputs have been executed.\\n    /// @dev See the `wasOutputExecuted` function.\\n    mapping(uint256 => BitMaps.BitMap) internal _executed;\\n\\n    /// @notice The current consensus contract.\\n    /// @dev See the `getConsensus` and `migrateToConsensus` functions.\\n    IConsensus internal _consensus;\\n\\n    /// @notice The input box contract.\\n    /// @dev See the `getInputBox` function.\\n    IInputBox internal immutable _inputBox;\\n\\n    /// @notice The portals supported by the application.\\n    /// @dev See the `getPortals` function.\\n    IPortal[] internal _portals;\\n\\n    /// @notice Creates an `Application` contract.\\n    /// @param consensus The initial consensus contract\\n    /// @param inputBox The input box contract\\n    /// @param portals The portals supported by the application\\n    /// @param initialOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    constructor(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] memory portals,\\n        address initialOwner,\\n        bytes32 templateHash\\n    ) Ownable(initialOwner) {\\n        _templateHash = templateHash;\\n        _consensus = consensus;\\n        _inputBox = inputBox;\\n        for (uint256 i; i < portals.length; ++i) {\\n            _portals.push(portals[i]);\\n        }\\n    }\\n\\n    /// @notice Accept Ether transfers.\\n    /// @dev If you wish to transfer Ether to an application while informing\\n    ///      the backend of it, then please do so through the Ether portal contract.\\n    receive() external payable {}\\n\\n    function executeOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) external override nonReentrant {\\n        validateOutput(output, proof);\\n\\n        uint256 inputIndex = proof.calculateInputIndex();\\n        uint64 outputIndexWithinInput = proof.outputIndexWithinInput;\\n\\n        BitMaps.BitMap storage bitmap = _executed[outputIndexWithinInput];\\n\\n        if (output.length < 4) {\\n            revert OutputNotExecutable(output);\\n        }\\n\\n        bytes4 selector = bytes4(output[:4]);\\n        bytes calldata arguments = output[4:];\\n\\n        if (selector == Outputs.Voucher.selector) {\\n            if (bitmap.get(inputIndex)) {\\n                revert OutputNotReexecutable(output);\\n            }\\n            _executeVoucher(arguments);\\n        } else if (selector == Outputs.DelegateCallVoucher.selector) {\\n            if (bitmap.get(inputIndex)) {\\n                revert OutputNotReexecutable(output);\\n            }\\n            _executeDelegateCallVoucher(arguments);\\n        } else {\\n            revert OutputNotExecutable(output);\\n        }\\n\\n        bitmap.set(inputIndex);\\n        emit OutputExecuted(uint64(inputIndex), outputIndexWithinInput, output);\\n    }\\n\\n    function migrateToConsensus(\\n        IConsensus newConsensus\\n    ) external override onlyOwner {\\n        _consensus = newConsensus;\\n        emit NewConsensus(newConsensus);\\n    }\\n\\n    function wasOutputExecuted(\\n        uint256 inputIndex,\\n        uint256 outputIndexWithinInput\\n    ) external view override returns (bool) {\\n        return _executed[outputIndexWithinInput].get(inputIndex);\\n    }\\n\\n    function validateOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) public view override {\\n        uint256 inputIndex = proof.calculateInputIndex();\\n\\n        if (!proof.inputRange.contains(inputIndex)) {\\n            revert InputIndexOutOfRange(inputIndex, proof.inputRange);\\n        }\\n\\n        bytes32 outputHash = keccak256(output);\\n\\n        if (!proof.isOutputHashesRootHashValid(outputHash)) {\\n            revert IncorrectOutputHashesRootHash();\\n        }\\n\\n        if (!proof.isOutputsEpochRootHashValid()) {\\n            revert IncorrectOutputsEpochRootHash();\\n        }\\n\\n        bytes32 epochHash = _getEpochHash(proof.inputRange);\\n\\n        if (!proof.isEpochHashValid(epochHash)) {\\n            revert IncorrectEpochHash();\\n        }\\n    }\\n\\n    function getTemplateHash() external view override returns (bytes32) {\\n        return _templateHash;\\n    }\\n\\n    function getConsensus() external view override returns (IConsensus) {\\n        return _consensus;\\n    }\\n\\n    function getInputBox() external view override returns (IInputBox) {\\n        return _inputBox;\\n    }\\n\\n    function getPortals() external view override returns (IPortal[] memory) {\\n        return _portals;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Holder, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IApplication).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Get the epoch hash regarding an input range from the current consensus.\\n    /// @param inputRange The input range\\n    /// @return The epoch hash\\n    function _getEpochHash(\\n        InputRange calldata inputRange\\n    ) internal view returns (bytes32) {\\n        return _consensus.getEpochHash(address(this), inputRange);\\n    }\\n\\n    /// @notice Executes a voucher\\n    /// @param arguments ABI-encoded arguments\\n    function _executeVoucher(bytes calldata arguments) internal {\\n        address destination;\\n        uint256 value;\\n        bytes memory payload;\\n\\n        (destination, value, payload) = abi.decode(\\n            arguments,\\n            (address, uint256, bytes)\\n        );\\n\\n        destination.safeCall(value, payload);\\n    }\\n\\n    /// @notice Executes a delegatecall voucher\\n    /// @param arguments ABI-encoded arguments\\n    function _executeDelegateCallVoucher(bytes calldata arguments) internal {\\n        address destination;\\n        bytes memory payload;\\n\\n        (destination, payload) = abi.decode(arguments, (address, bytes));\\n\\n        destination.safeDelegateCall(payload);\\n    }\\n}\\n\",\"keccak256\":\"0x5119ba0344182acea4f1a5ce91c7386be17a48e4b2c9881f5a708a29357cc660\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/ApplicationFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IApplicationFactory} from \\\"./IApplicationFactory.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IPortal} from \\\"../portals/IPortal.sol\\\";\\nimport {Application} from \\\"./Application.sol\\\";\\n\\n/// @title Application Factory\\n/// @notice Allows anyone to reliably deploy a new `Application` contract.\\ncontract ApplicationFactory is IApplicationFactory {\\n    function newApplication(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] memory portals,\\n        address appOwner,\\n        bytes32 templateHash\\n    ) external override returns (Application) {\\n        Application appContract = new Application(\\n            consensus,\\n            inputBox,\\n            portals,\\n            appOwner,\\n            templateHash\\n        );\\n\\n        emit ApplicationCreated(\\n            consensus,\\n            inputBox,\\n            portals,\\n            appOwner,\\n            templateHash,\\n            appContract\\n        );\\n\\n        return appContract;\\n    }\\n\\n    function newApplication(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] memory portals,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external override returns (Application) {\\n        Application appContract = new Application{salt: salt}(\\n            consensus,\\n            inputBox,\\n            portals,\\n            appOwner,\\n            templateHash\\n        );\\n\\n        emit ApplicationCreated(\\n            consensus,\\n            inputBox,\\n            portals,\\n            appOwner,\\n            templateHash,\\n            appContract\\n        );\\n\\n        return appContract;\\n    }\\n\\n    function calculateApplicationAddress(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] memory portals,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Application).creationCode,\\n                        abi.encode(\\n                            consensus,\\n                            inputBox,\\n                            portals,\\n                            appOwner,\\n                            templateHash\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x738565636f6d80e3f3e53537a2194846ff85deb864e39d25268a954d9b124967\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/IApplication.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IPortal} from \\\"../portals/IPortal.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice The base layer incarnation of an application running on the execution layer.\\n/// @notice The state of the application advances through inputs sent to an `IInputBox` contract (see the `getInputBox` function).\\n/// @notice These inputs can be sent either directly, or indirectly through portals (see the `getPortals` function).\\n/// @notice Reader nodes can retrieve inputs sent to the `IInputBox` contract through events, and feed them into the machine.\\n/// @notice Validator nodes can also submit claims to the `IConsensus` contract (see the `getConsensus` function).\\n/// @notice Once accepted, claims can be used to validate outputs generated by the machine.\\n/// @notice Some outputs are executable, which means they can have on-chain side effects.\\n/// @notice Every application is subscribed to some consensus, and may be governed by some owner.\\n/// The consensus has the power to accept claims, which, in turn, are used to validate outputs.\\n/// Meanwhile, the owner can replace the consensus at any time.\\n/// Therefore, the users of an application must trust both the consensus and the application owner.\\n/// @notice There are several ownership models to choose from:\\n/// - no owner (address zero)\\n/// - individual signer (externally-owned account)\\n/// - multiple signers (multi-sig)\\n/// - DAO (decentralized autonomous organization)\\n/// - self-owned application (off-chain governance logic)\\n/// @notice See `IConsensus` for examples of consensus models.\\ninterface IApplication is IERC721Receiver, IERC1155Receiver {\\n    // Events\\n\\n    /// @notice MUST trigger when a new consensus is chosen.\\n    /// @param newConsensus The new consensus\\n    event NewConsensus(IConsensus newConsensus);\\n\\n    /// @notice MUST trigger when an output is executed.\\n    /// @param inputIndex The index of the input that emitted the output\\n    /// @param outputIndexWithinInput The index of the output amongst all outputs emitted by the input\\n    /// @param output The output\\n    event OutputExecuted(\\n        uint64 inputIndex,\\n        uint64 outputIndexWithinInput,\\n        bytes output\\n    );\\n\\n    // Errors\\n\\n    /// @notice Could not validate an output because the input\\n    /// that generated it is outside the input range of the epoch.\\n    /// @param inputIndex The input index\\n    /// @param inputRange The input range\\n    error InputIndexOutOfRange(uint256 inputIndex, InputRange inputRange);\\n\\n    /// @notice Could not execute an output, because the application contract doesn't know how to.\\n    /// @param output The output\\n    error OutputNotExecutable(bytes output);\\n\\n    /// @notice Could not execute an output, because it was already executed.\\n    /// @param output The output\\n    error OutputNotReexecutable(bytes output);\\n\\n    /// @notice Raised when some `OutputValidityProof` variables does not match\\n    ///         the presented finalized epoch.\\n    error IncorrectEpochHash();\\n\\n    /// @notice Raised when `OutputValidityProof` metadata memory range is NOT\\n    ///         contained in epoch's output memory range.\\n    error IncorrectOutputsEpochRootHash();\\n\\n    /// @notice Raised when Merkle root of output hash is NOT contained\\n    ///         in the output metadata array memory range.\\n    error IncorrectOutputHashesRootHash();\\n\\n    // Permissioned functions\\n\\n    /// @notice Migrate the application to a new consensus.\\n    /// @param newConsensus The new consensus\\n    /// @dev Can only be called by the application owner.\\n    function migrateToConsensus(IConsensus newConsensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Execute an output.\\n    /// @param output The output\\n    /// @param proof The proof used to validate the output against\\n    ///              a claim submitted by the current consensus contract\\n    /// @dev On a successful execution, emits a `OutputExecuted` event.\\n    /// @dev May raise any of the errors raised by `validateOutput`,\\n    /// as well as `OutputNotExecutable` and `OutputNotReexecutable`.\\n    function executeOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) external;\\n\\n    /// @notice Check whether an output has been executed.\\n    /// @param inputIndex The index of the input in the input box\\n    /// @param outputIndexWithinInput The index of output emitted by the input\\n    /// @return Whether the output has been executed before\\n    function wasOutputExecuted(\\n        uint256 inputIndex,\\n        uint256 outputIndexWithinInput\\n    ) external view returns (bool);\\n\\n    /// @notice Validate an output.\\n    /// @param output The output\\n    /// @param proof The proof used to validate the output against\\n    ///              a claim submitted by the current consensus contract\\n    /// @dev May raise `InputIndexOutOfRange`, `IncorrectEpochHash`,\\n    /// `IncorrectOutputsEpochRootHash`, or `IncorrectOutputHashesRootHash`.\\n    function validateOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) external view;\\n\\n    /// @notice Get the application's template hash.\\n    /// @return The application's template hash\\n    function getTemplateHash() external view returns (bytes32);\\n\\n    /// @notice Get the current consensus.\\n    /// @return The current consensus\\n    function getConsensus() external view returns (IConsensus);\\n\\n    /// @notice Get the input box that the application is listening to.\\n    /// @return The input box\\n    function getInputBox() external view returns (IInputBox);\\n\\n    /// @notice Get the portals that the application expects inputs from.\\n    /// @return The portals.\\n    function getPortals() external view returns (IPortal[] memory);\\n}\\n\",\"keccak256\":\"0xb7f77e632c14935998e986276cbea53e9a52bc576aae51cbc8c51cedcbafc6bc\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/IApplicationFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Application} from \\\"./Application.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IPortal} from \\\"../portals/IPortal.sol\\\";\\n\\n/// @title Application Factory interface\\ninterface IApplicationFactory {\\n    // Events\\n\\n    /// @notice A new application was deployed.\\n    /// @param consensus The initial consensus contract\\n    /// @param inputBox The input box contract\\n    /// @param portals The portals supported by the application\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param appContract The application contract\\n    /// @dev MUST be triggered on a successful call to `newApplication`.\\n    event ApplicationCreated(\\n        IConsensus indexed consensus,\\n        IInputBox inputBox,\\n        IPortal[] portals,\\n        address appOwner,\\n        bytes32 templateHash,\\n        Application appContract\\n    );\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new application.\\n    /// @param consensus The initial consensus contract\\n    /// @param inputBox The input box contract\\n    /// @param portals The portals supported by the application\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    function newApplication(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] calldata portals,\\n        address appOwner,\\n        bytes32 templateHash\\n    ) external returns (Application);\\n\\n    /// @notice Deploy a new application deterministically.\\n    /// @param consensus The initial consensus contract\\n    /// @param inputBox The input box contract\\n    /// @param portals The portals supported by the application\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param salt The salt used to deterministically generate the application contract address\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    function newApplication(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] calldata portals,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external returns (Application);\\n\\n    /// @notice Calculate the address of an application contract to be deployed deterministically.\\n    /// @param consensus The initial consensus contract\\n    /// @param inputBox The input box contract\\n    /// @param portals The portals supported by the application\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param salt The salt used to deterministically generate the application contract address\\n    /// @return The deterministic application contract address\\n    /// @dev Beware that only the `newApplication` function with the `salt` parameter\\n    ///      is able to deterministically deploy an application.\\n    function calculateApplicationAddress(\\n        IConsensus consensus,\\n        IInputBox inputBox,\\n        IPortal[] calldata portals,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc8124036aad5321f0c30692196984061f55c82599a8da5c83f10bcfa64403817\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Provides data availability of inputs for applications.\\n/// @notice Each application has its own append-only list of inputs.\\n/// @notice Off-chain, inputs can be retrieved via events.\\n/// @notice On-chain, only the input hashes are stored.\\n/// @notice See `LibInput` for more details on how such hashes are computed.\\ninterface IInputBox {\\n    /// @notice MUST trigger when an input is added.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @param input The input blob\\n    event InputAdded(\\n        address indexed appContract,\\n        uint256 indexed index,\\n        bytes input\\n    );\\n\\n    /// @notice Input is too large.\\n    /// @param appContract The application contract address\\n    /// @param inputLength The input length\\n    /// @param maxInputLength The maximum input length\\n    error InputTooLarge(\\n        address appContract,\\n        uint256 inputLength,\\n        uint256 maxInputLength\\n    );\\n\\n    /// @notice Send an input to an application.\\n    /// @param appContract The application contract address\\n    /// @param payload The input payload\\n    /// @return The hash of the input blob\\n    /// @dev MUST fire an `InputAdded` event.\\n    function addInput(\\n        address appContract,\\n        bytes calldata payload\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs sent to an application.\\n    /// @param appContract The application contract address\\n    function getNumberOfInputs(\\n        address appContract\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in an application's input box.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @dev The provided index must be valid.\\n    function getInputHash(\\n        address appContract,\\n        uint256 index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xae7730cd7ab2b31a86d7c4933215853ea6c0b1b4dc60d4ec24e5cfc2ec005fe3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibAddress.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {LibError} from \\\"../library/LibError.sol\\\";\\n\\nlibrary LibAddress {\\n    using LibError for bytes;\\n\\n    /// @notice Perform a low level call and raise error if failed\\n    /// @param destination The address that will be called\\n    /// @param value The amount of Wei to be transferred through the call\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// contracts\\u2014encodes a function call\\n    function safeCall(\\n        address destination,\\n        uint256 value,\\n        bytes memory payload\\n    ) internal {\\n        bool success;\\n        bytes memory returndata;\\n\\n        (success, returndata) = destination.call{value: value}(payload);\\n\\n        if (!success) {\\n            returndata.raise();\\n        }\\n    }\\n\\n    /// @notice Perform a delegate call and raise error if failed\\n    /// @param destination The address that will be called\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// libraries\\u2014encodes a function call\\n    function safeDelegateCall(\\n        address destination,\\n        bytes memory payload\\n    ) internal {\\n        bool success;\\n        bytes memory returndata;\\n\\n        (success, returndata) = destination.delegatecall(payload);\\n\\n        if (!success) {\\n            returndata.raise();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcae26d227ecb61fe953e6a5937037529b02fd929f6857151661121d6d233c0ac\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibError.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary LibError {\\n    /// @notice Raise error data\\n    /// @param errordata Data returned by failed low-level call\\n    function raise(bytes memory errordata) internal pure {\\n        if (errordata.length == 0) {\\n            revert();\\n        } else {\\n            assembly {\\n                revert(add(32, errordata), mload(errordata))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d5f9497f40e172fe1a0b9e2635cd4b14c4c3d16bcfd851db034273573aae37d\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibInputRange.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\nlibrary LibInputRange {\\n    /// @notice Check if an input range contains an input.\\n    /// @param r The input range\\n    /// @param inputIndex The input index\\n    /// @return Whether the input range contains the input.\\n    function contains(\\n        InputRange calldata r,\\n        uint256 inputIndex\\n    ) internal pure returns (bool) {\\n        return r.firstIndex <= inputIndex && inputIndex <= r.lastIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x30e95c1eb8b8f45bf4bc02c26e2b69a949025fa1bb34cb804137d7e2d229aa78\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibMerkle32.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.22;\\n\\n/// @title Merkle library for trees of 32-byte leaves\\n/// @notice This library is meant for creating and verifying Merkle proofs.\\n/// @notice Each Merkle tree is assumed to have `2^height` leaves.\\n/// @notice Nodes are concatenated pairwise and hashed with `keccak256`.\\n/// @notice Siblings are in bottom-up order, from leaf to root.\\nlibrary LibMerkle32 {\\n    using LibMerkle32 for bytes32[];\\n\\n    /// @notice Compute the root of a Merkle tree from its leaves.\\n    /// @param leaves The left-most leaves of the Merkle tree\\n    /// @param height The height of the Merkle tree\\n    /// @return The root hash of the Merkle tree\\n    /// @dev Raises an error if more than `2^height` leaves are provided.\\n    function merkleRoot(\\n        bytes32[] memory leaves,\\n        uint256 height\\n    ) internal pure returns (bytes32) {\\n        bytes32 defaultNode;\\n        for (uint256 i; i < height; ++i) {\\n            leaves = leaves.parentLevel(defaultNode);\\n            defaultNode = parent(defaultNode, defaultNode);\\n        }\\n        require(leaves.length <= 1, \\\"LibMerkle32: too many leaves\\\");\\n        return leaves.at(0, defaultNode);\\n    }\\n\\n    /// @notice Compute the siblings of the ancestors of a leaf in a Merkle tree.\\n    /// @param leaves The left-most leaves of the Merkle tree\\n    /// @param index The index of the leaf\\n    /// @param height The height of the Merkle tree\\n    /// @return The siblings of the ancestors of the leaf in bottom-up order\\n    /// @dev Raises an error if the provided index is out of bounds.\\n    /// @dev Raises an error if more than `2^height` leaves are provided.\\n    function siblings(\\n        bytes32[] memory leaves,\\n        uint256 index,\\n        uint256 height\\n    ) internal pure returns (bytes32[] memory) {\\n        bytes32[] memory sibs = new bytes32[](height);\\n        bytes32 defaultNode;\\n        for (uint256 i; i < height; ++i) {\\n            sibs[i] = leaves.at(index ^ 1, defaultNode);\\n            leaves = leaves.parentLevel(defaultNode);\\n            defaultNode = parent(defaultNode, defaultNode);\\n            index >>= 1;\\n        }\\n        require(index == 0, \\\"LibMerkle32: index out of bounds\\\");\\n        require(leaves.length <= 1, \\\"LibMerkle32: too many leaves\\\");\\n        return sibs;\\n    }\\n\\n    /// @notice Compute the root of a Merkle tree after replacing one of its leaves.\\n    /// @param sibs The siblings of the ancestors of the leaf in bottom-up order\\n    /// @param index The index of the leaf\\n    /// @param leaf The new leaf\\n    /// @return The root hash of the new Merkle tree\\n    /// @dev Raises an error if the provided index is out of bounds.\\n    function merkleRootAfterReplacement(\\n        bytes32[] calldata sibs,\\n        uint256 index,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32) {\\n        uint256 height = sibs.length;\\n        for (uint256 i; i < height; ++i) {\\n            bytes32 sibling = sibs[i];\\n            if (index & 1 == 0) {\\n                leaf = parent(leaf, sibling);\\n            } else {\\n                leaf = parent(sibling, leaf);\\n            }\\n            index >>= 1;\\n        }\\n        require(index == 0, \\\"LibMerkle32: index out of bounds\\\");\\n        return leaf;\\n    }\\n\\n    /// @notice Compute the parent of two nodes.\\n    /// @param leftNode The left node\\n    /// @param rightNode The right node\\n    /// @return parentNode The parent node\\n    /// @dev Uses assembly for extra performance\\n    function parent(\\n        bytes32 leftNode,\\n        bytes32 rightNode\\n    ) internal pure returns (bytes32 parentNode) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, leftNode)\\n            mstore(0x20, rightNode)\\n            parentNode := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /// @notice Compute the parent level of an array of nodes.\\n    /// @param nodes The array of left-most nodes\\n    /// @param defaultNode The default node after the array\\n    /// @return The left-most nodes of the parent level\\n    /// @dev The default node of a parent level is\\n    /// the parent node of two default nodes.\\n    function parentLevel(\\n        bytes32[] memory nodes,\\n        bytes32 defaultNode\\n    ) internal pure returns (bytes32[] memory) {\\n        uint256 n = (nodes.length + 1) / 2; // ceil(#nodes / 2)\\n        bytes32[] memory level = new bytes32[](n);\\n        for (uint256 i; i < n; ++i) {\\n            bytes32 leftLeaf = nodes[2 * i];\\n            bytes32 rightLeaf = nodes.at(2 * i + 1, defaultNode);\\n            level[i] = parent(leftLeaf, rightLeaf);\\n        }\\n        return level;\\n    }\\n\\n    /// @notice Get the node at some index\\n    /// @param nodes The array of left-most nodes\\n    /// @param index The index of the node\\n    /// @param defaultNode The default node after the array\\n    function at(\\n        bytes32[] memory nodes,\\n        uint256 index,\\n        bytes32 defaultNode\\n    ) internal pure returns (bytes32) {\\n        if (index < nodes.length) {\\n            return nodes[index];\\n        } else {\\n            return defaultNode;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47ec1967c131735784544d1e1610a4eca01d54198411184f5e16c8662c5b63e7\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibOutputValidityProof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\\"../common/CanonicalMachine.sol\\\";\\nimport {Outputs} from \\\"../common/Outputs.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\n\\nimport {LibMerkle32} from \\\"./LibMerkle32.sol\\\";\\n\\nlibrary LibOutputValidityProof {\\n    using LibMerkle32 for bytes32[];\\n\\n    /// @notice Check if epoch hash is valid\\n    /// @param v The output validity proof\\n    /// @param epochHash The epoch hash\\n    function isEpochHashValid(\\n        OutputValidityProof calldata v,\\n        bytes32 epochHash\\n    ) internal pure returns (bool) {\\n        return\\n            epochHash ==\\n            keccak256(abi.encode(v.outputsEpochRootHash, v.machineStateHash));\\n    }\\n\\n    /// @notice Check if the outputs epoch root hash is valid\\n    /// @param v The output validity proof\\n    function isOutputsEpochRootHashValid(\\n        OutputValidityProof calldata v\\n    ) internal pure returns (bool) {\\n        bytes32[] calldata siblings = v.outputHashesInEpochSiblings;\\n        return\\n            (siblings.length == CanonicalMachine.LOG2_MAX_INPUTS_PER_EPOCH) &&\\n            (v.outputsEpochRootHash ==\\n                siblings.merkleRootAfterReplacement(\\n                    v.inputIndexWithinEpoch,\\n                    v.outputHashesRootHash\\n                ));\\n    }\\n\\n    /// @notice Check if the output hashes root hash is valid\\n    /// @param v The output validity proof\\n    /// @param outputHash The output hash\\n    function isOutputHashesRootHashValid(\\n        OutputValidityProof calldata v,\\n        bytes32 outputHash\\n    ) internal pure returns (bool) {\\n        bytes32[] calldata siblings = v.outputHashInOutputHashesSiblings;\\n        return\\n            (siblings.length == CanonicalMachine.LOG2_MAX_OUTPUTS_PER_INPUT) &&\\n            (v.outputHashesRootHash ==\\n                siblings.merkleRootAfterReplacement(\\n                    v.outputIndexWithinInput,\\n                    outputHash\\n                ));\\n    }\\n\\n    /// @notice Calculate the input index\\n    /// @param v The output validity proof\\n    /// @return The input index\\n    function calculateInputIndex(\\n        OutputValidityProof calldata v\\n    ) internal pure returns (uint256) {\\n        return uint256(v.inputRange.firstIndex) + v.inputIndexWithinEpoch;\\n    }\\n}\\n\",\"keccak256\":\"0x2719d93756e4477a7827c455a55f08066da64257a9570a867df3fbf2022217b8\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/portals/IPortal.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Portal interface\\ninterface IPortal is IERC165 {\\n    // Permissionless functions\\n\\n    /// @notice Get the input box used by this portal.\\n    /// @return The input box\\n    function getInputBox() external view returns (IInputBox);\\n}\\n\",\"keccak256\":\"0xbc364030939ea4a214e2f3673eaca1c500fcfd4929239a3b5d804ffc5687ed37\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c806303557d67146200004b5780635c44eda4146200007e578063f63adead1462000095575b600080fd5b620000626200005c366004620003aa565b620000ac565b6040516001600160a01b03909116815260200160405180910390f35b620000626200008f3660046200043b565b6200014d565b62000062620000a6366004620003aa565b620001e8565b600080828888888888604051620000c390620002b5565b620000d395949392919062000509565b8190604051809103906000f5905080158015620000f4573d6000803e3d6000fd5b509050876001600160a01b03167ff0a2d32dae19c50fb841822aba94a3a9ba00be0584f7d8229795d66d9532395288888888866040516200013a95949392919062000548565b60405180910390a2979650505050505050565b60008086868686866040516200016390620002b5565b6200017395949392919062000509565b604051809103906000f08015801562000190573d6000803e3d6000fd5b509050866001600160a01b03167ff0a2d32dae19c50fb841822aba94a3a9ba00be0584f7d8229795d66d953239528787878786604051620001d695949392919062000548565b60405180910390a29695505050505050565b60006200026a82604051806020016200020190620002b5565b601f1982820381018352601f9091011660408190526200022e908b908b908b908b908b9060200162000509565b60408051601f19818403018152908290526200024e9291602001620005bd565b6040516020818303038152906040528051906020012062000275565b979650505050505050565b6000620002848383306200028b565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6116d680620005df83390190565b6001600160a01b0381168114620002d957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8035620002ff81620002c3565b919050565b600082601f8301126200031657600080fd5b8135602067ffffffffffffffff80831115620003365762000336620002dc565b8260051b604051601f19603f830116810181811084821117156200035e576200035e620002dc565b60405293845260208187018101949081019250878511156200037f57600080fd5b6020870191505b848210156200026a576200039a82620002f2565b8352918301919083019062000386565b60008060008060008060c08789031215620003c457600080fd5b8635620003d181620002c3565b95506020870135620003e381620002c3565b9450604087013567ffffffffffffffff8111156200040057600080fd5b6200040e89828a0162000304565b94505060608701356200042181620002c3565b9598949750929560808101359460a0909101359350915050565b600080600080600060a086880312156200045457600080fd5b85356200046181620002c3565b945060208601356200047381620002c3565b9350604086013567ffffffffffffffff8111156200049057600080fd5b6200049e8882890162000304565b9350506060860135620004b181620002c3565b949793965091946080013592915050565b60008151808452602080850194506020840160005b83811015620004fe5781516001600160a01b031687529582019590820190600101620004d7565b509495945050505050565b600060018060a01b038088168352808716602084015260a060408401526200053560a0840187620004c2565b9416606083015250608001529392505050565b600060018060a01b03808816835260a060208401526200056c60a0840188620004c2565b9581166040840152606083019490945250911660809091015292915050565b6000815160005b81811015620005ae576020818501810151868301520162000592565b50600093019283525090919050565b6000620005d6620005cf83866200058b565b846200058b565b94935050505056fe60c06040523480156200001157600080fd5b50604051620016d6380380620016d68339810160408190526200003491620001a5565b816001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f8162000114565b50600180556080819052600380546001600160a01b0319166001600160a01b0387811691909117909155841660a05260005b835181101562000108576004848281518110620000c257620000c2620002c2565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501620000a1565b505050505050620002d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200017a57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8051620001a08162000164565b919050565b600080600080600060a08688031215620001be57600080fd5b8551620001cb8162000164565b80955050602080870151620001e08162000164565b60408801519095506001600160401b0380821115620001fe57600080fd5b818901915089601f8301126200021357600080fd5b8151818111156200022857620002286200017d565b8060051b604051601f19603f830116810181811085821117156200025057620002506200017d565b60405291825284820192508381018501918c8311156200026f57600080fd5b938501935b828510156200029857620002888562000193565b8452938501939285019262000274565b809850505050505050620002af6060870162000193565b9150608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60805160a0516113d8620002fe60003960006101060152600061024b01526113d86000f3fe6080604052600436106100eb5760003560e01c806361b12c661161008a578063dbe1a6eb11610059578063dbe1a6eb146102d3578063f23a6e61146102f3578063f2fde38b1461031f578063fc4116831461033f57600080fd5b806361b12c6614610239578063715018a6146102745780638da5cb5b14610289578063bc197c81146102a757600080fd5b8063150b7a02116100c6578063150b7a0214610195578063179e740b146101d957806324523192146101f75780634dcea1551461021757600080fd5b8062aace9a146100f757806301ffc9a714610143578063108e8c1d1461017357600080fd5b366100f257005b600080fd5b34801561010357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014f57600080fd5b5061016361015e366004610c9f565b61035f565b604051901515815260200161013a565b34801561017f57600080fd5b506101886103a5565b60405161013a9190610cc9565b3480156101a157600080fd5b506101c06101b0366004610de0565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161013a565b3480156101e557600080fd5b506003546001600160a01b0316610126565b34801561020357600080fd5b50610163610212366004610e4b565b610407565b34801561022357600080fd5b50610237610232366004610e6d565b610437565b005b34801561024557600080fd5b506040517f0000000000000000000000000000000000000000000000000000000000000000815260200161013a565b34801561028057600080fd5b5061023761051e565b34801561029557600080fd5b506000546001600160a01b0316610126565b3480156102b357600080fd5b506101c06102c2366004610f87565b63bc197c8160e01b95945050505050565b3480156102df57600080fd5b506102376102ee366004610e6d565b610532565b3480156102ff57600080fd5b506101c061030e366004611034565b63f23a6e6160e01b95945050505050565b34801561032b57600080fd5b5061023761033a36600461109c565b610726565b34801561034b57600080fd5b5061023761035a36600461109c565b610764565b60006001600160e01b031982166328373a4560e01b148061039057506001600160e01b03198216630a85bd0160e11b145b8061039f575061039f826107c0565b92915050565b606060048054806020026020016040519081016040528092919081815260200182805480156103fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103df575b5050505050905090565b6000818152600260209081526040808320600886901c8452909152812054600160ff85161b1615155b9392505050565b6000610442826107f5565b905061044e8282610830565b6104785760405163fef5040960e01b815261046f9082908490600401611102565b60405180910390fd5b6000848460405161048a929190611116565b604051908190039020905061049f8382610875565b6104bc5760405163017c689560e61b815260040160405180910390fd5b6104c5836108cc565b6104e257604051634371daa160e11b815260040160405180910390fd5b60006104ed84610927565b90506104f9848261099b565b61051657604051636fbd3b7160e11b815260040160405180910390fd5b505050505050565b6105266109e1565b6105306000610a0e565b565b61053a610a5e565b610545838383610437565b6000610550826107f5565b905060006105646080840160608501611126565b6001600160401b038116600090815260026020526040902090915060048510156105a5578585604051636942600f60e11b815260040161046f92919061116a565b60006105b4600482888a61117e565b6105bd916111a8565b90503660006105cf886004818c61117e565b909250905063dc857e9160e01b6001600160e01b031984160161063957600886901c600090815260208590526040902054600160ff88161b161561062a578888604051637b97a6bb60e01b815260040161046f92919061116a565b6106348282610a88565b6106b6565b63efcde17560e01b6001600160e01b031984160161069957600886901c600090815260208590526040902054600160ff88161b161561068f578888604051637b97a6bb60e01b815260040161046f92919061116a565b6106348282610abb565b8888604051636942600f60e11b815260040161046f92919061116a565b600886901c60009081526020859052604090208054600160ff89161b1790557fd39d8e3e610251d36b5464d9cabbd8fa8319fe6cff76941ce041ecf04669726f86868b8b60405161070a94939291906111d8565b60405180910390a150505050505061072160018055565b505050565b61072e6109e1565b6001600160a01b03811661075857604051631e4fbdf760e01b81526000600482015260240161046f565b61076181610a0e565b50565b61076c6109e1565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f4991c6f37185659e276ff918a96f3e20e6c5abcd8c9aab450dc19c2f7ad35cb59060200160405180910390a150565b60006001600160e01b03198216630271189760e51b148061039f57506301ffc9a760e01b6001600160e01b031983161461039f565b60006108076060830160408401611126565b6001600160401b031661081d6020840184611126565b6001600160401b031661039f919061120f565b6000816108406020850185611126565b6001600160401b03161115801561043057506108626040840160208501611126565b6001600160401b03169091111592915050565b6000368161088660e0860186611230565b90925090506010811480156108c357506108bc6108a96080870160608801611126565b839083906001600160401b031687610ae9565b8560800135145b95945050505050565b600036816108de610100850185611230565b909250905060208114801561091f57506109186109016060860160408701611126565b839083906001600160401b03166080880135610ae9565b8460a00135145b949350505050565b60035460405163307d66bf60e21b81526000916001600160a01b03169063c1f59afc9061095a9030908690600401611280565b602060405180830381865afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f919061129d565b60008260a001358360c001356040516020016109c1929190918252602082015260400190565b604051602081830303815290604052805190602001208214905092915050565b6000546001600160a01b031633146105305760405163118cdaa760e01b815233600482015260240161046f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610a8157604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000806060610a99848601866112b6565b91945092509050610ab46001600160a01b0384168383610baa565b5050505050565b60006060610acb8385018561130e565b9092509050610ae36001600160a01b03831682610c1d565b50505050565b600083815b81811015610b51576000878783818110610b0a57610b0a61135d565b90506020020135905085600116600003610b335760008581526020829052604090209450610b44565b600081815260208690526040902094505b50600194851c9401610aee565b508315610ba05760405162461bcd60e51b815260206004820181905260248201527f4c69624d65726b6c6533323a20696e646578206f7574206f6620626f756e6473604482015260640161046f565b5090949350505050565b60006060846001600160a01b03168484604051610bc79190611373565b60006040518083038185875af1925050503d8060008114610c04576040519150601f19603f3d011682016040523d82523d6000602084013e610c09565b606091505b50909250905081610ab457610ab481610c89565b60006060836001600160a01b031683604051610c399190611373565b600060405180830381855af49150503d8060008114610c74576040519150601f19603f3d011682016040523d82523d6000602084013e610c79565b606091505b50909250905081610ae357610ae3815b8051600003610c9757600080fd5b805181602001fd5b600060208284031215610cb157600080fd5b81356001600160e01b03198116811461043057600080fd5b6020808252825182820181905260009190848201906040850190845b81811015610d0a5783516001600160a01b031683529284019291840191600101610ce5565b50909695505050505050565b6001600160a01b038116811461076157600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610d6957610d69610d2b565b604052919050565b600082601f830112610d8257600080fd5b81356001600160401b03811115610d9b57610d9b610d2b565b610dae601f8201601f1916602001610d41565b818152846020838601011115610dc357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610df657600080fd5b8435610e0181610d16565b93506020850135610e1181610d16565b92506040850135915060608501356001600160401b03811115610e3357600080fd5b610e3f87828801610d71565b91505092959194509250565b60008060408385031215610e5e57600080fd5b50508035926020909101359150565b600080600060408486031215610e8257600080fd5b83356001600160401b0380821115610e9957600080fd5b818601915086601f830112610ead57600080fd5b813581811115610ebc57600080fd5b876020828501011115610ece57600080fd5b602092830195509350908501359080821115610ee957600080fd5b5084016101208187031215610efd57600080fd5b809150509250925092565b600082601f830112610f1957600080fd5b813560206001600160401b03821115610f3457610f34610d2b565b8160051b610f43828201610d41565b9283528481018201928281019087851115610f5d57600080fd5b83870192505b84831015610f7c57823582529183019190830190610f63565b979650505050505050565b600080600080600060a08688031215610f9f57600080fd5b8535610faa81610d16565b94506020860135610fba81610d16565b935060408601356001600160401b0380821115610fd657600080fd5b610fe289838a01610f08565b94506060880135915080821115610ff857600080fd5b61100489838a01610f08565b9350608088013591508082111561101a57600080fd5b5061102788828901610d71565b9150509295509295909350565b600080600080600060a0868803121561104c57600080fd5b853561105781610d16565b9450602086013561106781610d16565b9350604086013592506060860135915060808601356001600160401b0381111561109057600080fd5b61102788828901610d71565b6000602082840312156110ae57600080fd5b813561043081610d16565b80356001600160401b03811681146110d057600080fd5b919050565b6001600160401b03806110e7836110b9565b168352806110f7602084016110b9565b166020840152505050565b8281526060810161043060208301846110d5565b8183823760009101908152919050565b60006020828403121561113857600080fd5b610430826110b9565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061091f602083018486611141565b6000808585111561118e57600080fd5b8386111561119b57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156111d05780818660040360031b1b83161692505b505092915050565b60006001600160401b03808716835280861660208401525060606040830152611205606083018486611141565b9695505050505050565b8082018082111561039f57634e487b7160e01b600052601160045260246000fd5b6000808335601e1984360301811261124757600080fd5b8301803591506001600160401b0382111561126157600080fd5b6020019150600581901b360382131561127957600080fd5b9250929050565b6001600160a01b03831681526060810161043060208301846110d5565b6000602082840312156112af57600080fd5b5051919050565b6000806000606084860312156112cb57600080fd5b83356112d681610d16565b92506020840135915060408401356001600160401b038111156112f857600080fd5b61130486828701610d71565b9150509250925092565b6000806040838503121561132157600080fd5b823561132c81610d16565b915060208301356001600160401b0381111561134757600080fd5b61135385828601610d71565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000825160005b81811015611394576020818601810151858301520161137a565b50600092019182525091905056fea2646970667358221220065690aa558c226601c6855f13ad5e36d71a9c4c8cc49aaf9060519b30f496f864736f6c63430008170033a26469706673582212205c56bf9fd67eefa5bc4d2f1ef0cd3f63e53e830767c0b87db42e328955aa10a564736f6c63430008170033",
  "devdoc": {
    "events": {
      "ApplicationCreated(address,address,address[],address,bytes32,address)": {
        "details": "MUST be triggered on a successful call to `newApplication`.",
        "params": {
          "appContract": "The application contract",
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "inputBox": "The input box contract",
          "portals": "The portals supported by the application",
          "templateHash": "The initial machine state hash"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)": {
        "details": "Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.",
        "params": {
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "inputBox": "The input box contract",
          "portals": "The portals supported by the application",
          "salt": "The salt used to deterministically generate the application contract address",
          "templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The deterministic application contract address"
        }
      },
      "newApplication(address,address,address[],address,bytes32)": {
        "details": "On success, MUST emit an `ApplicationCreated` event.",
        "params": {
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "inputBox": "The input box contract",
          "portals": "The portals supported by the application",
          "templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The application"
        }
      },
      "newApplication(address,address,address[],address,bytes32,bytes32)": {
        "details": "On success, MUST emit an `ApplicationCreated` event.",
        "params": {
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "inputBox": "The input box contract",
          "portals": "The portals supported by the application",
          "salt": "The salt used to deterministically generate the application contract address",
          "templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The application"
        }
      }
    },
    "title": "Application Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApplicationCreated(address,address,address[],address,bytes32,address)": {
        "notice": "A new application was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)": {
        "notice": "Calculate the address of an application contract to be deployed deterministically."
      },
      "newApplication(address,address,address[],address,bytes32)": {
        "notice": "Deploy a new application."
      },
      "newApplication(address,address,address[],address,bytes32,bytes32)": {
        "notice": "Deploy a new application deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `Application` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}