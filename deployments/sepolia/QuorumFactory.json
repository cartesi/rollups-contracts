{
  "address": "0xB41851d69891748b27779e382cc8de6e8C128e1C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract Quorum",
          "name": "quorum",
          "type": "address"
        }
      ],
      "name": "QuorumCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateQuorumAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        }
      ],
      "name": "newQuorum",
      "outputs": [
        {
          "internalType": "contract Quorum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "newQuorum",
      "outputs": [
        {
          "internalType": "contract Quorum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62c5c32c87a0908fd95f3a4b142244ae6f695b029631fd68382c28a096c21e2c",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xB25D9D56f5877Ca869A0362c324aCC2F1465AF1B",
    "contractAddress": null,
    "transactionIndex": 102,
    "gasUsed": "792878",
    "logsBloom": "0x
    "blockHash": "0x1ebf5c5d78217f24624a634383b6cd80d0e6e5ebae294aed1984ce2afb8c1253",
    "transactionHash": "0x62c5c32c87a0908fd95f3a4b142244ae6f695b029631fd68382c28a096c21e2c",
    "logs": [],
    "blockNumber": 6099741,
    "cumulativeGasUsed": "10105978",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d5e580c56a1973c1da5089d8c687e7bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Quorum\",\"name\":\"quorum\",\"type\":\"address\"}],\"name\":\"QuorumCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateQuorumAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"newQuorum\",\"outputs\":[{\"internalType\":\"contract Quorum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"newQuorum\",\"outputs\":[{\"internalType\":\"contract Quorum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"QuorumCreated(address)\":{\"details\":\"MUST be triggered on a successful call to `newQuorum`.\",\"params\":{\"quorum\":\"The quorum\"}}},\"kind\":\"dev\",\"methods\":{\"calculateQuorumAddress(address[],bytes32)\":{\"details\":\"Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.\",\"params\":{\"salt\":\"The salt used to deterministically generate the quorum address\",\"validators\":\"the list of validators\"},\"returns\":{\"_0\":\"The deterministic quorum address\"}},\"newQuorum(address[])\":{\"details\":\"On success, MUST emit a `QuorumCreated` event.\",\"params\":{\"validators\":\"the list of validators\"},\"returns\":{\"_0\":\"The quorum\"}},\"newQuorum(address[],bytes32)\":{\"details\":\"On success, MUST emit a `QuorumCreated` event.\",\"params\":{\"salt\":\"The salt used to deterministically generate the quorum address\",\"validators\":\"the list of validators\"},\"returns\":{\"_0\":\"The quorum\"}}},\"title\":\"Quorum Factory\",\"version\":1},\"userdoc\":{\"events\":{\"QuorumCreated(address)\":{\"notice\":\"A new quorum was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateQuorumAddress(address[],bytes32)\":{\"notice\":\"Calculate the address of a quorum to be deployed deterministically.\"},\"newQuorum(address[])\":{\"notice\":\"Deploy a new quorum.\"},\"newQuorum(address[],bytes32)\":{\"notice\":\"Deploy a new quorum deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `Quorum` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/quorum/QuorumFactory.sol\":\"QuorumFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"contracts/common/InputRange.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice A range of input indices.\\n/// @param firstIndex The index of the first input\\n/// @param lastIndex The index of the last input\\nstruct InputRange {\\n    uint64 firstIndex;\\n    uint64 lastIndex;\\n}\\n\",\"keccak256\":\"0x4825516380f1fb39d5b15e99c1b08e07c636dc062ad3036093e78ba8e624cd33\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice Stores epoch hashes for several applications and input ranges.\\n/// @dev This contract was designed to be inherited by implementations of the `IConsensus` interface\\n/// that only need a simple mechanism of storage and retrieval of epoch hashes.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice Indexes epoch hashes by application contract address, first input index and last input index.\\n    mapping(address => mapping(uint256 => mapping(uint256 => bytes32)))\\n        private _epochHashes;\\n\\n    /// @notice Get the epoch hash for a certain application and input range.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @return epochHash The epoch hash\\n    /// @dev For claimed epochs, returns the epoch hash of the last accepted claim.\\n    /// @dev For unclaimed epochs, returns `bytes32(0)`.\\n    function getEpochHash(\\n        address appContract,\\n        InputRange calldata r\\n    ) public view override returns (bytes32 epochHash) {\\n        epochHash = _epochHashes[appContract][r.firstIndex][r.lastIndex];\\n    }\\n\\n    /// @notice Accept a claim.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev On successs, emits a `ClaimAcceptance` event.\\n    function _acceptClaim(\\n        address appContract,\\n        InputRange calldata r,\\n        bytes32 epochHash\\n    ) internal {\\n        _epochHashes[appContract][r.firstIndex][r.lastIndex] = epochHash;\\n        emit ClaimAcceptance(appContract, r, epochHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2e41db152b70de9fe9917780efeba10ea3c0e1a1a2c96b158d81b1129a877eb5\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice Provides data availability of epoch hashes for applications.\\n/// @notice An epoch hash is produced after the machine processes a range of inputs and the epoch is finalized.\\n/// This hash can be later used to prove that any given output was produced by the machine during the epoch.\\n/// @notice After an epoch is finalized, a validator may submit a claim containing the application contract address,\\n/// the range of inputs accepted during the epoch, and the epoch hash.\\n/// @notice Validators may synchronize epoch finalization, but such mechanism is not specified by this interface.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time.\\ninterface IConsensus {\\n    /// @notice MUST trigger when a claim is submitted.\\n    /// @param submitter The submitter address\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev Overwrites any previous submissions regarding `submitter`, `appContract` and `inputRange`.\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed appContract,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice MUST trigger when a claim is accepted.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST be triggered after some `ClaimSubmission` event regarding `appContract`, `inputRange` and `epochHash`.\\n    /// @dev Overwrites any previous acceptances regarding `appContract` and `inputRange`.\\n    event ClaimAcceptance(\\n        address indexed appContract,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST fire a `ClaimSubmission` event.\\n    /// @dev MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.\\n    function submitClaim(\\n        address appContract,\\n        InputRange calldata inputRange,\\n        bytes32 epochHash\\n    ) external;\\n\\n    /// @notice Get the epoch hash for a certain application and input range.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @return epochHash The epoch hash\\n    /// @dev For claimed epochs, must return the epoch hash of the last accepted claim.\\n    /// @dev For unclaimed epochs, MUST either revert or return `bytes32(0)`.\\n    function getEpochHash(\\n        address appContract,\\n        InputRange calldata inputRange\\n    ) external view returns (bytes32 epochHash);\\n}\\n\",\"keccak256\":\"0xd2ea451e450f6b3b01bd77b95dbb00465d263cae9285a03c8ffd0d96c4d75dc1\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/IQuorumFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Quorum} from \\\"./Quorum.sol\\\";\\n\\n/// @title Quorum Factory interface\\ninterface IQuorumFactory {\\n    // Events\\n\\n    /// @notice A new quorum was deployed.\\n    /// @param quorum The quorum\\n    /// @dev MUST be triggered on a successful call to `newQuorum`.\\n    event QuorumCreated(Quorum quorum);\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new quorum.\\n    /// @param validators the list of validators\\n    /// @return The quorum\\n    /// @dev On success, MUST emit a `QuorumCreated` event.\\n    function newQuorum(address[] calldata validators) external returns (Quorum);\\n\\n    /// @notice Deploy a new quorum deterministically.\\n    /// @param validators the list of validators\\n    /// @param salt The salt used to deterministically generate the quorum address\\n    /// @return The quorum\\n    /// @dev On success, MUST emit a `QuorumCreated` event.\\n    function newQuorum(\\n        address[] calldata validators,\\n        bytes32 salt\\n    ) external returns (Quorum);\\n\\n    /// @notice Calculate the address of a quorum to be deployed deterministically.\\n    /// @param validators the list of validators\\n    /// @param salt The salt used to deterministically generate the quorum address\\n    /// @return The deterministic quorum address\\n    /// @dev Beware that only the `newQuorum` function with the `salt` parameter\\n    ///      is able to deterministically deploy a quorum.\\n    function calculateQuorumAddress(\\n        address[] calldata validators,\\n        bytes32 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xcca705e094a685e5a4252adef5ac71d42bc811b5a5294ea86da9469aded40373\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/Quorum.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {InputRange} from \\\"../../common/InputRange.sol\\\";\\n\\n/// @notice A consensus model controlled by a small, immutable set of `n` validators.\\n/// @notice You can know the value of `n` by calling the `numOfValidators` function.\\n/// @notice Upon construction, each validator is assigned a unique number between 1 and `n`.\\n/// These numbers are used internally instead of addresses for optimization reasons.\\n/// @notice You can list the validators in the quorum by calling the `validatorById`\\n/// function for each ID from 1 to `n`.\\ncontract Quorum is AbstractConsensus {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    /// @notice The total number of validators.\\n    /// @notice See the `numOfValidators` function.\\n    uint256 private immutable _numOfValidators;\\n\\n    /// @notice Validator IDs indexed by address.\\n    /// @notice See the `validatorId` function.\\n    /// @dev Non-validators are assigned to ID zero.\\n    /// @dev Validators have IDs greater than zero.\\n    mapping(address => uint256) private _validatorId;\\n\\n    /// @notice Validator addresses indexed by ID.\\n    /// @notice See the `validatorById` function.\\n    /// @dev Invalid IDs map to address zero.\\n    mapping(uint256 => address) private _validatorById;\\n\\n    /// @notice Votes in favor of a particular claim.\\n    /// @param inFavorCount The number of validators in favor of the claim\\n    /// @param inFavorById The set of validators in favor of the claim\\n    /// @dev `inFavorById` is a bitmap indexed by validator IDs.\\n    struct Votes {\\n        uint256 inFavorCount;\\n        BitMaps.BitMap inFavorById;\\n    }\\n\\n    /// @notice Votes indexed by claim\\n    /// (application contract address, first input index, last input index, and epoch hash).\\n    /// @dev See the `numOfValidatorsInFavorOf` and `isValidatorInFavorOf` functions.\\n    mapping(address => mapping(uint256 => mapping(uint256 => mapping(bytes32 => Votes))))\\n        private _votes;\\n\\n    /// @param validators The array of validator addresses\\n    /// @dev Duplicates in the `validators` array are ignored.\\n    constructor(address[] memory validators) {\\n        uint256 n;\\n        for (uint256 i; i < validators.length; ++i) {\\n            address validator = validators[i];\\n            if (_validatorId[validator] == 0) {\\n                uint256 id = ++n;\\n                _validatorId[validator] = id;\\n                _validatorById[id] = validator;\\n            }\\n        }\\n        _numOfValidators = n;\\n    }\\n\\n    /// @notice Submit a claim.\\n    /// @notice If the majority of the quorum submit a claim, it is accepted.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev Can only be called by a validator.\\n    function submitClaim(\\n        address appContract,\\n        InputRange calldata r,\\n        bytes32 epochHash\\n    ) external {\\n        uint256 id = _validatorId[msg.sender];\\n        require(id > 0, \\\"Quorum: caller is not validator\\\");\\n\\n        emit ClaimSubmission(msg.sender, appContract, r, epochHash);\\n\\n        Votes storage votes = _getVotes(appContract, r, epochHash);\\n\\n        if (!votes.inFavorById.get(id)) {\\n            votes.inFavorById.set(id);\\n            if (++votes.inFavorCount == 1 + _numOfValidators / 2) {\\n                _acceptClaim(appContract, r, epochHash);\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the number of validators.\\n    function numOfValidators() external view returns (uint256) {\\n        return _numOfValidators;\\n    }\\n\\n    /// @notice Get the ID of a validator.\\n    /// @param validator The validator address\\n    /// @dev Validators have IDs greater than zero.\\n    /// @dev Non-validators are assigned to ID zero.\\n    function validatorId(address validator) external view returns (uint256) {\\n        return _validatorId[validator];\\n    }\\n\\n    /// @notice Get the address of a validator by its ID.\\n    /// @param id The validator ID\\n    /// @dev Validator IDs range from 1 to `N`, the total number of validators.\\n    /// @dev Invalid IDs map to address zero.\\n    function validatorById(uint256 id) external view returns (address) {\\n        return _validatorById[id];\\n    }\\n\\n    /// @notice Get the number of validators in favor of a claim.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @param epochHash The epoch hash\\n    /// @return Number of validators in favor of claim\\n    function numOfValidatorsInFavorOf(\\n        address appContract,\\n        InputRange calldata r,\\n        bytes32 epochHash\\n    ) external view returns (uint256) {\\n        return _getVotes(appContract, r, epochHash).inFavorCount;\\n    }\\n\\n    /// @notice Check whether a validator is in favor of a claim.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @param epochHash The epoch hash\\n    /// @param id The ID of the validator\\n    /// @return Whether validator is in favor of claim\\n    /// @dev Assumes the provided ID is valid.\\n    function isValidatorInFavorOf(\\n        address appContract,\\n        InputRange calldata r,\\n        bytes32 epochHash,\\n        uint256 id\\n    ) external view returns (bool) {\\n        return _getVotes(appContract, r, epochHash).inFavorById.get(id);\\n    }\\n\\n    /// @notice Get a `Votes` structure from storage from a given claim.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @param epochHash The epoch hash\\n    /// @return The `Votes` structure related to given claim\\n    function _getVotes(\\n        address appContract,\\n        InputRange calldata r,\\n        bytes32 epochHash\\n    ) internal view returns (Votes storage) {\\n        return _votes[appContract][r.firstIndex][r.lastIndex][epochHash];\\n    }\\n}\\n\",\"keccak256\":\"0xb71b0a8f14a6ba381f7921212827b014fb4d025be94ce7c52f564ecbd0cc55ea\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/QuorumFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IQuorumFactory} from \\\"./IQuorumFactory.sol\\\";\\nimport {Quorum} from \\\"./Quorum.sol\\\";\\n\\n/// @title Quorum Factory\\n/// @notice Allows anyone to reliably deploy a new `Quorum` contract.\\ncontract QuorumFactory is IQuorumFactory {\\n    function newQuorum(\\n        address[] calldata validators\\n    ) external override returns (Quorum) {\\n        Quorum quorum = new Quorum(validators);\\n\\n        emit QuorumCreated(quorum);\\n\\n        return quorum;\\n    }\\n\\n    function newQuorum(\\n        address[] calldata validators,\\n        bytes32 salt\\n    ) external override returns (Quorum) {\\n        Quorum quorum = new Quorum{salt: salt}(validators);\\n\\n        emit QuorumCreated(quorum);\\n\\n        return quorum;\\n    }\\n\\n    function calculateQuorumAddress(\\n        address[] calldata validators,\\n        bytes32 salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Quorum).creationCode,\\n                        abi.encode(validators)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb1923c3b0af1c983824913a5ef4db0d567aa33d3d1a05fe8ee258a31782973b5\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d60806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063073e5afa146100465780634254a77e14610075578063cd4d3dec14610088575b600080fd5b6100596100543660046102b2565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102f4565b61011a565b6100596100963660046102f4565b61019f565b60008083836040516100ac90610259565b6100b7929190610340565b604051809103906000f0801580156100d3573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a19392505050565b60008082858560405161012c90610259565b610137929190610340565b8190604051809103906000f5905080158015610157573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a1949350505050565b600061021382604051806020016101b590610259565b601f1982820381018352601f9091011660408190526101da9088908890602001610340565b60408051601f19818403018152908290526101f892916020016103c5565b6040516020818303038152906040528051906020012061021b565b949350505050565b600061022883833061022f565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b610950806103db83390190565b60008083601f84011261027857600080fd5b50813567ffffffffffffffff81111561029057600080fd5b6020830191508360208260051b85010111156102ab57600080fd5b9250929050565b600080602083850312156102c557600080fd5b823567ffffffffffffffff8111156102dc57600080fd5b6102e885828601610266565b90969095509350505050565b60008060006040848603121561030957600080fd5b833567ffffffffffffffff81111561032057600080fd5b61032c86828701610266565b909790965060209590950135949350505050565b6020808252818101839052600090846040840183805b878110156103885783356001600160a01b038116808214610375578384fd5b8452509284019291840191600101610356565b5090979650505050505050565b6000815160005b818110156103b6576020818501810151868301520161039c565b50600093019283525090919050565b60006102136103d48386610395565b8461039556fe60a060405234801561001057600080fd5b5060405161095038038061095083398101604081905261002f91610114565b6000805b82518110156100d8576000838281518110610050576100506101d8565b6020026020010151905060016000826001600160a01b03166001600160a01b03168152602001908152602001600020546000036100cf576000610092846101ee565b6001600160a01b03831660008181526001602090815260408083208590558483526002909152902080546001600160a01b03191690911790559350505b50600101610033565b5060805250610215565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461010f57600080fd5b919050565b6000602080838503121561012757600080fd5b82516001600160401b038082111561013e57600080fd5b818501915085601f83011261015257600080fd5b815181811115610164576101646100e2565b8060051b604051601f19603f83011681018181108582111715610189576101896100e2565b6040529182528482019250838101850191888311156101a757600080fd5b938501935b828510156101cc576101bd856100f8565b845293850193928501926101ac565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161020e57634e487b7160e01b600052601160045260246000fd5b5060010190565b60805161071961023760003960008181610101015261029401526107196000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637d094dd61161005b5780637d094dd614610125578063866b85fa14610138578063c1f59afc1461014d578063ddccf48c1461016057600080fd5b80630a6f1fe8146100825780631c45396a146100be5780631e526e45146100ff575b600080fd5b6100ab61009036600461050a565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100e76100cc36600461052c565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100b5565b7f00000000000000000000000000000000000000000000000000000000000000006100ab565b6100ab61013336600461055d565b610183565b61014b61014636600461055d565b610199565b005b6100ab61015b36600461059a565b6102f0565b61017361016e3660046105ce565b610365565b60405190151581526020016100b5565b6000610190848484610388565b54949350505050565b33600090815260016020526040902054806101fa5760405162461bcd60e51b815260206004820152601f60248201527f51756f72756d3a2063616c6c6572206973206e6f742076616c696461746f7200604482015260640160405180910390fd5b836001600160a01b0316336001600160a01b03167f940326476a755934b6ae9d2b36ffcf1f447c3a8223f6d9f8a796b54fbfcce582858560405161023f929190610629565b60405180910390a36000610254858585610388565b90506102636001820183610410565b6102e957600882901c600090815260018281016020526040909120805460ff85169290921b90911790556102b860027f000000000000000000000000000000000000000000000000000000000000000061067a565b6102c390600161069c565b81600001600081546102d4906106af565b9182905550036102e9576102e9858585610435565b5050505050565b6001600160a01b0382166000908152602081815260408220908290610317908501856106c8565b67ffffffffffffffff168152602001908152602001600020600083602001602081019061034491906106c8565b67ffffffffffffffff16815260200190815260200160002054905092915050565b600061037f82610376878787610388565b60010190610410565b95945050505050565b6001600160a01b038316600090815260036020908152604082209082906103b1908601866106c8565b67ffffffffffffffff16815260200190815260200160002060008460200160208101906103de91906106c8565b67ffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090509392505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b6001600160a01b03831660009081526020818152604082208392909161045d908601866106c8565b67ffffffffffffffff168152602001908152602001600020600084602001602081019061048a91906106c8565b67ffffffffffffffff16815260200190815260200160002081905550826001600160a01b03167f4e068a6b8ed35e6ee03244135874f91ccebb5cd1f3a258a6dc2ad0ebd298847683836040516104e1929190610629565b60405180910390a2505050565b80356001600160a01b038116811461050557600080fd5b919050565b60006020828403121561051c57600080fd5b610525826104ee565b9392505050565b60006020828403121561053e57600080fd5b5035919050565b60006040828403121561055757600080fd5b50919050565b60008060006080848603121561057257600080fd5b61057b846104ee565b925061058a8560208601610545565b9150606084013590509250925092565b600080606083850312156105ad57600080fd5b6105b6836104ee565b91506105c58460208501610545565b90509250929050565b60008060008060a085870312156105e457600080fd5b6105ed856104ee565b93506105fc8660208701610545565b93969395505050506060820135916080013590565b803567ffffffffffffffff8116811461050557600080fd5b6060810167ffffffffffffffff8061064086610611565b1683528061065060208701610611565b166020840152508260408301529392505050565b634e487b7160e01b600052601160045260246000fd5b60008261069757634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561042f5761042f610664565b6000600182016106c1576106c1610664565b5060010190565b6000602082840312156106da57600080fd5b6105258261061156fea2646970667358221220157a6bffa7eaa9ca48d7a15a2149a3dbf5c9ab1640312cf2a2a555f1a84f020064736f6c63430008170033a26469706673582212201302a4a7cea7b4d5365e7b315030c118e7bdcc628cf4e01f3e46fd11f52d43b264736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063073e5afa146100465780634254a77e14610075578063cd4d3dec14610088575b600080fd5b6100596100543660046102b2565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102f4565b61011a565b6100596100963660046102f4565b61019f565b60008083836040516100ac90610259565b6100b7929190610340565b604051809103906000f0801580156100d3573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a19392505050565b60008082858560405161012c90610259565b610137929190610340565b8190604051809103906000f5905080158015610157573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a1949350505050565b600061021382604051806020016101b590610259565b601f1982820381018352601f9091011660408190526101da9088908890602001610340565b60408051601f19818403018152908290526101f892916020016103c5565b6040516020818303038152906040528051906020012061021b565b949350505050565b600061022883833061022f565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b610950806103db83390190565b60008083601f84011261027857600080fd5b50813567ffffffffffffffff81111561029057600080fd5b6020830191508360208260051b85010111156102ab57600080fd5b9250929050565b600080602083850312156102c557600080fd5b823567ffffffffffffffff8111156102dc57600080fd5b6102e885828601610266565b90969095509350505050565b60008060006040848603121561030957600080fd5b833567ffffffffffffffff81111561032057600080fd5b61032c86828701610266565b909790965060209590950135949350505050565b6020808252818101839052600090846040840183805b878110156103885783356001600160a01b038116808214610375578384fd5b8452509284019291840191600101610356565b5090979650505050505050565b6000815160005b818110156103b6576020818501810151868301520161039c565b50600093019283525090919050565b60006102136103d48386610395565b8461039556fe60a060405234801561001057600080fd5b5060405161095038038061095083398101604081905261002f91610114565b6000805b82518110156100d8576000838281518110610050576100506101d8565b6020026020010151905060016000826001600160a01b03166001600160a01b03168152602001908152602001600020546000036100cf576000610092846101ee565b6001600160a01b03831660008181526001602090815260408083208590558483526002909152902080546001600160a01b03191690911790559350505b50600101610033565b5060805250610215565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461010f57600080fd5b919050565b6000602080838503121561012757600080fd5b82516001600160401b038082111561013e57600080fd5b818501915085601f83011261015257600080fd5b815181811115610164576101646100e2565b8060051b604051601f19603f83011681018181108582111715610189576101896100e2565b6040529182528482019250838101850191888311156101a757600080fd5b938501935b828510156101cc576101bd856100f8565b845293850193928501926101ac565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161020e57634e487b7160e01b600052601160045260246000fd5b5060010190565b60805161071961023760003960008181610101015261029401526107196000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637d094dd61161005b5780637d094dd614610125578063866b85fa14610138578063c1f59afc1461014d578063ddccf48c1461016057600080fd5b80630a6f1fe8146100825780631c45396a146100be5780631e526e45146100ff575b600080fd5b6100ab61009036600461050a565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100e76100cc36600461052c565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100b5565b7f00000000000000000000000000000000000000000000000000000000000000006100ab565b6100ab61013336600461055d565b610183565b61014b61014636600461055d565b610199565b005b6100ab61015b36600461059a565b6102f0565b61017361016e3660046105ce565b610365565b60405190151581526020016100b5565b6000610190848484610388565b54949350505050565b33600090815260016020526040902054806101fa5760405162461bcd60e51b815260206004820152601f60248201527f51756f72756d3a2063616c6c6572206973206e6f742076616c696461746f7200604482015260640160405180910390fd5b836001600160a01b0316336001600160a01b03167f940326476a755934b6ae9d2b36ffcf1f447c3a8223f6d9f8a796b54fbfcce582858560405161023f929190610629565b60405180910390a36000610254858585610388565b90506102636001820183610410565b6102e957600882901c600090815260018281016020526040909120805460ff85169290921b90911790556102b860027f000000000000000000000000000000000000000000000000000000000000000061067a565b6102c390600161069c565b81600001600081546102d4906106af565b9182905550036102e9576102e9858585610435565b5050505050565b6001600160a01b0382166000908152602081815260408220908290610317908501856106c8565b67ffffffffffffffff168152602001908152602001600020600083602001602081019061034491906106c8565b67ffffffffffffffff16815260200190815260200160002054905092915050565b600061037f82610376878787610388565b60010190610410565b95945050505050565b6001600160a01b038316600090815260036020908152604082209082906103b1908601866106c8565b67ffffffffffffffff16815260200190815260200160002060008460200160208101906103de91906106c8565b67ffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090509392505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b6001600160a01b03831660009081526020818152604082208392909161045d908601866106c8565b67ffffffffffffffff168152602001908152602001600020600084602001602081019061048a91906106c8565b67ffffffffffffffff16815260200190815260200160002081905550826001600160a01b03167f4e068a6b8ed35e6ee03244135874f91ccebb5cd1f3a258a6dc2ad0ebd298847683836040516104e1929190610629565b60405180910390a2505050565b80356001600160a01b038116811461050557600080fd5b919050565b60006020828403121561051c57600080fd5b610525826104ee565b9392505050565b60006020828403121561053e57600080fd5b5035919050565b60006040828403121561055757600080fd5b50919050565b60008060006080848603121561057257600080fd5b61057b846104ee565b925061058a8560208601610545565b9150606084013590509250925092565b600080606083850312156105ad57600080fd5b6105b6836104ee565b91506105c58460208501610545565b90509250929050565b60008060008060a085870312156105e457600080fd5b6105ed856104ee565b93506105fc8660208701610545565b93969395505050506060820135916080013590565b803567ffffffffffffffff8116811461050557600080fd5b6060810167ffffffffffffffff8061064086610611565b1683528061065060208701610611565b166020840152508260408301529392505050565b634e487b7160e01b600052601160045260246000fd5b60008261069757634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561042f5761042f610664565b6000600182016106c1576106c1610664565b5060010190565b6000602082840312156106da57600080fd5b6105258261061156fea2646970667358221220157a6bffa7eaa9ca48d7a15a2149a3dbf5c9ab1640312cf2a2a555f1a84f020064736f6c63430008170033a26469706673582212201302a4a7cea7b4d5365e7b315030c118e7bdcc628cf4e01f3e46fd11f52d43b264736f6c63430008170033",
  "devdoc": {
    "events": {
      "QuorumCreated(address)": {
        "details": "MUST be triggered on a successful call to `newQuorum`.",
        "params": {
          "quorum": "The quorum"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateQuorumAddress(address[],bytes32)": {
        "details": "Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.",
        "params": {
          "salt": "The salt used to deterministically generate the quorum address",
          "validators": "the list of validators"
        },
        "returns": {
          "_0": "The deterministic quorum address"
        }
      },
      "newQuorum(address[])": {
        "details": "On success, MUST emit a `QuorumCreated` event.",
        "params": {
          "validators": "the list of validators"
        },
        "returns": {
          "_0": "The quorum"
        }
      },
      "newQuorum(address[],bytes32)": {
        "details": "On success, MUST emit a `QuorumCreated` event.",
        "params": {
          "salt": "The salt used to deterministically generate the quorum address",
          "validators": "the list of validators"
        },
        "returns": {
          "_0": "The quorum"
        }
      }
    },
    "title": "Quorum Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "QuorumCreated(address)": {
        "notice": "A new quorum was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateQuorumAddress(address[],bytes32)": {
        "notice": "Calculate the address of a quorum to be deployed deterministically."
      },
      "newQuorum(address[])": {
        "notice": "Deploy a new quorum."
      },
      "newQuorum(address[],bytes32)": {
        "notice": "Deploy a new quorum deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `Quorum` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}