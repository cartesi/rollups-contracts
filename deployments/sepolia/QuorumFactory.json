{
  "address": "0x22AFD9162079c7Ac0aF874054298Bf46F29157F1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IQuorum",
          "name": "quorum",
          "type": "address"
        }
      ],
      "name": "QuorumCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateQuorumAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "newQuorum",
      "outputs": [
        {
          "internalType": "contract IQuorum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        }
      ],
      "name": "newQuorum",
      "outputs": [
        {
          "internalType": "contract IQuorum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55e2aba0d58418dee2a8aa0b9ed7987bf68a425edf0123329cd01410f4148173",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xeA4037a524309056545fbAd9A688f449E7e05ffB",
    "contractAddress": null,
    "transactionIndex": 20,
    "gasUsed": "747585",
    "logsBloom": "0x
    "blockHash": "0xe207835cf5a874030118c49318edeab1018f4670774fd7770d586aa169a0e6c8",
    "transactionHash": "0x55e2aba0d58418dee2a8aa0b9ed7987bf68a425edf0123329cd01410f4148173",
    "logs": [],
    "blockNumber": 6850942,
    "cumulativeGasUsed": "5170571",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3277ebc53d2ec4c7847e5faa9f9b26b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IQuorum\",\"name\":\"quorum\",\"type\":\"address\"}],\"name\":\"QuorumCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateQuorumAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"newQuorum\",\"outputs\":[{\"internalType\":\"contract IQuorum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"}],\"name\":\"newQuorum\",\"outputs\":[{\"internalType\":\"contract IQuorum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"QuorumCreated(address)\":{\"details\":\"MUST be triggered on a successful call to `newQuorum`.\",\"params\":{\"quorum\":\"The quorum\"}}},\"kind\":\"dev\",\"methods\":{\"calculateQuorumAddress(address[],uint256,bytes32)\":{\"details\":\"Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.\",\"params\":{\"epochLength\":\"The epoch length\",\"salt\":\"The salt used to deterministically generate the quorum address\",\"validators\":\"the list of validators\"},\"returns\":{\"_0\":\"The deterministic quorum address\"}},\"newQuorum(address[],uint256)\":{\"details\":\"On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.\",\"params\":{\"epochLength\":\"The epoch length\",\"validators\":\"the list of validators\"},\"returns\":{\"_0\":\"The quorum\"}},\"newQuorum(address[],uint256,bytes32)\":{\"details\":\"On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.\",\"params\":{\"epochLength\":\"The epoch length\",\"salt\":\"The salt used to deterministically generate the quorum address\",\"validators\":\"the list of validators\"},\"returns\":{\"_0\":\"The quorum\"}}},\"title\":\"Quorum Factory\",\"version\":1},\"userdoc\":{\"events\":{\"QuorumCreated(address)\":{\"notice\":\"A new quorum was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateQuorumAddress(address[],uint256,bytes32)\":{\"notice\":\"Calculate the address of a quorum to be deployed deterministically.\"},\"newQuorum(address[],uint256)\":{\"notice\":\"Deploy a new quorum.\"},\"newQuorum(address[],uint256,bytes32)\":{\"notice\":\"Deploy a new quorum deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `IQuorum` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/quorum/QuorumFactory.sol\":\"QuorumFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\n\\n/// @notice Stores accepted claims for several applications.\\n/// @dev This contract was designed to be inherited by implementations of the `IConsensus` interface\\n/// that only need a simple mechanism of storage and retrieval of accepted claims.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice The epoch length\\n    uint256 private immutable _epochLength;\\n\\n    /// @notice Indexes accepted claims by application contract address.\\n    mapping(address => mapping(bytes32 => bool)) private _acceptedClaims;\\n\\n    /// @param epochLength The epoch length\\n    /// @dev Reverts if the epoch length is zero.\\n    constructor(uint256 epochLength) {\\n        require(epochLength > 0, \\\"epoch length must not be zero\\\");\\n        _epochLength = epochLength;\\n    }\\n\\n    /// @inheritdoc IConsensus\\n    function wasClaimAccepted(\\n        address appContract,\\n        bytes32 claim\\n    ) public view override returns (bool) {\\n        return _acceptedClaims[appContract][claim];\\n    }\\n\\n    /// @inheritdoc IConsensus\\n    function getEpochLength() public view override returns (uint256) {\\n        return _epochLength;\\n    }\\n\\n    /// @notice Accept a claim.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The output Merkle root hash\\n    /// @dev Emits a `ClaimAcceptance` event.\\n    function _acceptClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) internal {\\n        _acceptedClaims[appContract][claim] = true;\\n        emit ClaimAcceptance(appContract, lastProcessedBlockNumber, claim);\\n    }\\n}\\n\",\"keccak256\":\"0x8d94096a285a068e53dfa65f26d4aa8549c3edf0d80e1b3f4322a2df69e141b7\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Each application has its own stream of inputs.\\n/// See the `IInputBox` interface for calldata-based on-chain data availability.\\n/// @notice When an input is fed to the application, it may yield several outputs.\\n/// @notice Since genesis, a Merkle tree of all outputs ever produced is maintained\\n/// both inside and outside the Cartesi Machine.\\n/// @notice The claim that validators may submit to the consensus contract\\n/// is the root of this Merkle tree after processing all base layer blocks until some height.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time or;\\n/// - submitted and proven correct through an on-chain tournament.\\ninterface IConsensus {\\n    /// @notice MUST trigger when a claim is submitted.\\n    /// @param submitter The submitter address\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    );\\n\\n    /// @notice MUST trigger when a claim is accepted.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    event ClaimAcceptance(\\n        address indexed appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    /// @dev MUST fire a `ClaimSubmission` event.\\n    /// @dev MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.\\n    function submitClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external;\\n\\n    /// @notice Check if an output Merkle root hash was ever accepted by the consensus\\n    /// for a particular application.\\n    /// @param appContract The application contract address\\n    /// @param claim The root of the Merkle tree of outputs\\n    function wasClaimAccepted(\\n        address appContract,\\n        bytes32 claim\\n    ) external view returns (bool);\\n\\n    /// @notice Get the epoch length, in number of base layer blocks.\\n    /// @dev The epoch number of a block is defined as\\n    /// the integer division of the block number by the epoch length.\\n    function getEpochLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33ef3c4e213b2a3489b37d5ef553dc1165c598c56beb0ed8290723a5c74d821c\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/IQuorum.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\n\\n/// @notice A consensus model controlled by a small, immutable set of `n` validators.\\n/// @notice You can know the value of `n` by calling the `numOfValidators` function.\\n/// @notice Upon construction, each validator is assigned a unique number between 1 and `n`.\\n/// These numbers are used internally instead of addresses for gas optimization reasons.\\n/// @notice You can list the validators in the quorum by calling the `validatorById`\\n/// function for each ID from 1 to `n`.\\ninterface IQuorum is IConsensus {\\n    /// @notice Get the number of validators.\\n    function numOfValidators() external view returns (uint256);\\n\\n    /// @notice Get the ID of a validator.\\n    /// @param validator The validator address\\n    /// @dev Validators have IDs greater than zero.\\n    /// @dev Non-validators are assigned to ID zero.\\n    function validatorId(address validator) external view returns (uint256);\\n\\n    /// @notice Get the address of a validator by its ID.\\n    /// @param id The validator ID\\n    /// @dev Validator IDs range from 1 to `N`, the total number of validators.\\n    /// @dev Invalid IDs map to address zero.\\n    function validatorById(uint256 id) external view returns (address);\\n\\n    /// @notice Get the number of validators in favor of a claim.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The output Merkle root hash\\n    /// @return Number of validators in favor of claim\\n    function numOfValidatorsInFavorOf(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external view returns (uint256);\\n\\n    /// @notice Check whether a validator is in favor of a claim.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The output Merkle root hash\\n    /// @param id The ID of the validator\\n    /// @return Whether validator is in favor of claim\\n    /// @dev Assumes the provided ID is valid.\\n    function isValidatorInFavorOf(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim,\\n        uint256 id\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x16194cde8b5d9f4cc290f84a9e812c5722217b3ef8c6aa45155ab136ec23e5e3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/IQuorumFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IQuorum} from \\\"./IQuorum.sol\\\";\\n\\n/// @title Quorum Factory interface\\ninterface IQuorumFactory {\\n    // Events\\n\\n    /// @notice A new quorum was deployed.\\n    /// @param quorum The quorum\\n    /// @dev MUST be triggered on a successful call to `newQuorum`.\\n    event QuorumCreated(IQuorum quorum);\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new quorum.\\n    /// @param validators the list of validators\\n    /// @param epochLength The epoch length\\n    /// @return The quorum\\n    /// @dev On success, MUST emit a `QuorumCreated` event.\\n    /// @dev Duplicates in the `validators` array are ignored.\\n    /// @dev Reverts if the epoch length is zero.\\n    function newQuorum(\\n        address[] calldata validators,\\n        uint256 epochLength\\n    ) external returns (IQuorum);\\n\\n    /// @notice Deploy a new quorum deterministically.\\n    /// @param validators the list of validators\\n    /// @param epochLength The epoch length\\n    /// @param salt The salt used to deterministically generate the quorum address\\n    /// @return The quorum\\n    /// @dev On success, MUST emit a `QuorumCreated` event.\\n    /// @dev Duplicates in the `validators` array are ignored.\\n    /// @dev Reverts if the epoch length is zero.\\n    function newQuorum(\\n        address[] calldata validators,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external returns (IQuorum);\\n\\n    /// @notice Calculate the address of a quorum to be deployed deterministically.\\n    /// @param validators the list of validators\\n    /// @param epochLength The epoch length\\n    /// @param salt The salt used to deterministically generate the quorum address\\n    /// @return The deterministic quorum address\\n    /// @dev Beware that only the `newQuorum` function with the `salt` parameter\\n    ///      is able to deterministically deploy a quorum.\\n    function calculateQuorumAddress(\\n        address[] calldata validators,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xada5bfce326546f17f2b5a963864190e43ca92eb4776f3a7228b198fcae9aac3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/Quorum.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\nimport {IQuorum} from \\\"./IQuorum.sol\\\";\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\n\\ncontract Quorum is IQuorum, AbstractConsensus {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    /// @notice The total number of validators.\\n    /// @notice See the `numOfValidators` function.\\n    uint256 private immutable _numOfValidators;\\n\\n    /// @notice Validator IDs indexed by address.\\n    /// @notice See the `validatorId` function.\\n    /// @dev Non-validators are assigned to ID zero.\\n    /// @dev Validators have IDs greater than zero.\\n    mapping(address => uint256) private _validatorId;\\n\\n    /// @notice Validator addresses indexed by ID.\\n    /// @notice See the `validatorById` function.\\n    /// @dev Invalid IDs map to address zero.\\n    mapping(uint256 => address) private _validatorById;\\n\\n    /// @notice Votes in favor of a particular claim.\\n    /// @param inFavorCount The number of validators in favor of the claim\\n    /// @param inFavorById The set of validators in favor of the claim\\n    /// @dev `inFavorById` is a bitmap indexed by validator IDs.\\n    struct Votes {\\n        uint256 inFavorCount;\\n        BitMaps.BitMap inFavorById;\\n    }\\n\\n    /// @notice Votes indexed by application contract address,\\n    /// last processed block number and claim.\\n    /// @dev See the `numOfValidatorsInFavorOf` and `isValidatorInFavorOf` functions.\\n    mapping(address => mapping(uint256 => mapping(bytes32 => Votes)))\\n        private _votes;\\n\\n    /// @param validators The array of validator addresses\\n    /// @param epochLength The epoch length\\n    /// @dev Duplicates in the `validators` array are ignored.\\n    /// @dev Reverts if the epoch length is zero.\\n    constructor(\\n        address[] memory validators,\\n        uint256 epochLength\\n    ) AbstractConsensus(epochLength) {\\n        uint256 n;\\n        for (uint256 i; i < validators.length; ++i) {\\n            address validator = validators[i];\\n            if (_validatorId[validator] == 0) {\\n                uint256 id = ++n;\\n                _validatorId[validator] = id;\\n                _validatorById[id] = validator;\\n            }\\n        }\\n        _numOfValidators = n;\\n    }\\n\\n    function submitClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external override {\\n        uint256 id = _validatorId[msg.sender];\\n        require(id > 0, \\\"Quorum: caller is not validator\\\");\\n\\n        emit ClaimSubmission(\\n            msg.sender,\\n            appContract,\\n            lastProcessedBlockNumber,\\n            claim\\n        );\\n\\n        Votes storage votes = _getVotes(\\n            appContract,\\n            lastProcessedBlockNumber,\\n            claim\\n        );\\n\\n        if (!votes.inFavorById.get(id)) {\\n            votes.inFavorById.set(id);\\n            if (++votes.inFavorCount == 1 + _numOfValidators / 2) {\\n                _acceptClaim(appContract, lastProcessedBlockNumber, claim);\\n            }\\n        }\\n    }\\n\\n    function numOfValidators() external view override returns (uint256) {\\n        return _numOfValidators;\\n    }\\n\\n    function validatorId(\\n        address validator\\n    ) external view override returns (uint256) {\\n        return _validatorId[validator];\\n    }\\n\\n    function validatorById(\\n        uint256 id\\n    ) external view override returns (address) {\\n        return _validatorById[id];\\n    }\\n\\n    function numOfValidatorsInFavorOf(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external view override returns (uint256) {\\n        return\\n            _getVotes(appContract, lastProcessedBlockNumber, claim)\\n                .inFavorCount;\\n    }\\n\\n    function isValidatorInFavorOf(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim,\\n        uint256 id\\n    ) external view override returns (bool) {\\n        return\\n            _getVotes(appContract, lastProcessedBlockNumber, claim)\\n                .inFavorById\\n                .get(id);\\n    }\\n\\n    /// @notice Get a `Votes` structure from storage from a given claim.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The output Merkle root hash\\n    /// @return The `Votes` structure related to a given claim\\n    function _getVotes(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) internal view returns (Votes storage) {\\n        return _votes[appContract][lastProcessedBlockNumber][claim];\\n    }\\n}\\n\",\"keccak256\":\"0x4e850dc37778ce8cd0017f81decc6cdd40492de6e221c1d2cdfc4c2762252367\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/quorum/QuorumFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IQuorumFactory} from \\\"./IQuorumFactory.sol\\\";\\nimport {IQuorum} from \\\"./IQuorum.sol\\\";\\nimport {Quorum} from \\\"./Quorum.sol\\\";\\n\\n/// @title Quorum Factory\\n/// @notice Allows anyone to reliably deploy a new `IQuorum` contract.\\ncontract QuorumFactory is IQuorumFactory {\\n    function newQuorum(\\n        address[] calldata validators,\\n        uint256 epochLength\\n    ) external override returns (IQuorum) {\\n        IQuorum quorum = new Quorum(validators, epochLength);\\n\\n        emit QuorumCreated(quorum);\\n\\n        return quorum;\\n    }\\n\\n    function newQuorum(\\n        address[] calldata validators,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external override returns (IQuorum) {\\n        IQuorum quorum = new Quorum{salt: salt}(validators, epochLength);\\n\\n        emit QuorumCreated(quorum);\\n\\n        return quorum;\\n    }\\n\\n    function calculateQuorumAddress(\\n        address[] calldata validators,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Quorum).creationCode,\\n                        abi.encode(validators, epochLength)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x515c9f35a19239c71437e975ab8e57e87790b55ab650f3d6ee039b6b47d49932\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c90806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632f74f86214610046578063ca8f271c14610075578063d4af3bc814610088575b600080fd5b6100596100543660046102bb565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102bb565b610123565b61005961009636600461030c565b6101a2565b600080828686866040516100ae90610262565b6100ba93929190610358565b8190604051809103906000f59050801580156100da573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a195945050505050565b6000610199826040518060200161013990610262565b601f1982820381018352601f90910116604081905261016090899089908990602001610358565b60408051601f198184030181529082905261017e92916020016103e4565b60405160208183030381529060405280519060200120610224565b95945050505050565b6000808484846040516101b490610262565b6101c093929190610358565b604051809103906000f0801580156101dc573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a1949350505050565b6000610231838330610238565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6108598061040283390190565b60008083601f84011261028157600080fd5b50813567ffffffffffffffff81111561029957600080fd5b6020830191508360208260051b85010111156102b457600080fd5b9250929050565b600080600080606085870312156102d157600080fd5b843567ffffffffffffffff8111156102e857600080fd5b6102f48782880161026f565b90989097506020870135966040013595509350505050565b60008060006040848603121561032157600080fd5b833567ffffffffffffffff81111561033857600080fd5b6103448682870161026f565b909790965060209590950135949350505050565b604080825281018390526000846060830182805b878110156103a05783356001600160a01b03811680821461038b578384fd5b8452506020938401939092019160010161036c565b505060209390930193909352509392505050565b6000815160005b818110156103d557602081850181015186830152016103bb565b50600093019283525090919050565b60006103f96103f383866103b4565b846103b4565b94935050505056fe60c060405234801561001057600080fd5b5060405161085938038061085983398101604081905261002f9161016e565b80600081116100845760405162461bcd60e51b815260206004820152601d60248201527f65706f6368206c656e677468206d757374206e6f74206265207a65726f000000604482015260640160405180910390fd5b6080526000805b83518110156101305760008482815181106100a8576100a861023a565b6020026020010151905060016000826001600160a01b03166001600160a01b03168152602001908152602001600020546000036101275760006100ea84610250565b6001600160a01b03831660008181526001602090815260408083208590558483526002909152902080546001600160a01b03191690911790559350505b5060010161008b565b5060a052506102779050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461016957600080fd5b919050565b6000806040838503121561018157600080fd5b82516001600160401b038082111561019857600080fd5b818501915085601f8301126101ac57600080fd5b81516020828211156101c0576101c061013c565b8160051b604051601f19603f830116810181811086821117156101e5576101e561013c565b60405292835281830193508481018201928984111561020357600080fd5b948201945b838610156102285761021986610152565b85529482019493820193610208565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161027057634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a0516105b66102a36000396000818161010c01526102f70152600061019001526105b66000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636470af001161005b5780636470af00146101535780637051bfd5146101685780639618f35b1461017b578063cfe8a73b1461018e57600080fd5b80630a6f1fe81461008d5780631c45396a146100c95780631e526e451461010a5780634b84231c14610130575b600080fd5b6100b661009b36600461044b565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100f26100d736600461046d565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c0565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b61014361013e366004610486565b6101b4565b60405190151581526020016100c0565b6101666101613660046104bf565b6101f1565b005b6100b66101763660046104bf565b610353565b6101436101893660046104f2565b610369565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b60006101e8826101c5878787610395565b600882901c60009081526001918201602052604090205460ff9092161b16151590565b95945050505050565b33600090815260016020526040902054806102525760405162461bcd60e51b815260206004820152601f60248201527f51756f72756d3a2063616c6c6572206973206e6f742076616c696461746f7200604482015260640160405180910390fd5b60408051848152602081018490526001600160a01b0386169133917ff5a28e07a1b89d1ca3f9a2a7ef16bd650503a4791baf2e70dc401c21ee505f0a910160405180910390a360006102a5858585610395565b600883901c6000908152600180830160205260409091205491925060ff84161b1661034c57600882901c600090815260018281016020526040909120805460ff85169290921b909117905561031b60027f0000000000000000000000000000000000000000000000000000000000000000610532565b610326906001610554565b816000016000815461033790610567565b91829055500361034c5761034c8585856103c7565b5050505050565b6000610360848484610395565b54949350505050565b6001600160a01b03821660009081526020818152604080832084845290915290205460ff165b92915050565b6001600160a01b0383166000908152600360209081526040808320858452825280832084845290915290209392505050565b6001600160a01b038316600081815260208181526040808320858452825291829020805460ff1916600117905581518581529081018490527fd3e4892959c6ddb27e02bcaaebc0c1898d0f677b7360bf80339f10a8717957d3910160405180910390a2505050565b80356001600160a01b038116811461044657600080fd5b919050565b60006020828403121561045d57600080fd5b6104668261042f565b9392505050565b60006020828403121561047f57600080fd5b5035919050565b6000806000806080858703121561049c57600080fd5b6104a58561042f565b966020860135965060408601359560600135945092505050565b6000806000606084860312156104d457600080fd5b6104dd8461042f565b95602085013595506040909401359392505050565b6000806040838503121561050557600080fd5b61050e8361042f565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008261054f57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561038f5761038f61051c565b6000600182016105795761057961051c565b506001019056fea2646970667358221220642bb94e1d4dd60f0c8a41a3a000c90390997995461f65183db6e55f56e5032864736f6c63430008170033a264697066735822122056fc82af8dbf74e096ba755e657baedd2a8684ccc11e63a53a44d8ceb691249e64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632f74f86214610046578063ca8f271c14610075578063d4af3bc814610088575b600080fd5b6100596100543660046102bb565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102bb565b610123565b61005961009636600461030c565b6101a2565b600080828686866040516100ae90610262565b6100ba93929190610358565b8190604051809103906000f59050801580156100da573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a195945050505050565b6000610199826040518060200161013990610262565b601f1982820381018352601f90910116604081905261016090899089908990602001610358565b60408051601f198184030181529082905261017e92916020016103e4565b60405160208183030381529060405280519060200120610224565b95945050505050565b6000808484846040516101b490610262565b6101c093929190610358565b604051809103906000f0801580156101dc573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f446698b70271bce331e53210572bd37ac8c590b6cdca2e6763e6448243cba8029060200160405180910390a1949350505050565b6000610231838330610238565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6108598061040283390190565b60008083601f84011261028157600080fd5b50813567ffffffffffffffff81111561029957600080fd5b6020830191508360208260051b85010111156102b457600080fd5b9250929050565b600080600080606085870312156102d157600080fd5b843567ffffffffffffffff8111156102e857600080fd5b6102f48782880161026f565b90989097506020870135966040013595509350505050565b60008060006040848603121561032157600080fd5b833567ffffffffffffffff81111561033857600080fd5b6103448682870161026f565b909790965060209590950135949350505050565b604080825281018390526000846060830182805b878110156103a05783356001600160a01b03811680821461038b578384fd5b8452506020938401939092019160010161036c565b505060209390930193909352509392505050565b6000815160005b818110156103d557602081850181015186830152016103bb565b50600093019283525090919050565b60006103f96103f383866103b4565b846103b4565b94935050505056fe60c060405234801561001057600080fd5b5060405161085938038061085983398101604081905261002f9161016e565b80600081116100845760405162461bcd60e51b815260206004820152601d60248201527f65706f6368206c656e677468206d757374206e6f74206265207a65726f000000604482015260640160405180910390fd5b6080526000805b83518110156101305760008482815181106100a8576100a861023a565b6020026020010151905060016000826001600160a01b03166001600160a01b03168152602001908152602001600020546000036101275760006100ea84610250565b6001600160a01b03831660008181526001602090815260408083208590558483526002909152902080546001600160a01b03191690911790559350505b5060010161008b565b5060a052506102779050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461016957600080fd5b919050565b6000806040838503121561018157600080fd5b82516001600160401b038082111561019857600080fd5b818501915085601f8301126101ac57600080fd5b81516020828211156101c0576101c061013c565b8160051b604051601f19603f830116810181811086821117156101e5576101e561013c565b60405292835281830193508481018201928984111561020357600080fd5b948201945b838610156102285761021986610152565b85529482019493820193610208565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161027057634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a0516105b66102a36000396000818161010c01526102f70152600061019001526105b66000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636470af001161005b5780636470af00146101535780637051bfd5146101685780639618f35b1461017b578063cfe8a73b1461018e57600080fd5b80630a6f1fe81461008d5780631c45396a146100c95780631e526e451461010a5780634b84231c14610130575b600080fd5b6100b661009b36600461044b565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100f26100d736600461046d565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c0565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b61014361013e366004610486565b6101b4565b60405190151581526020016100c0565b6101666101613660046104bf565b6101f1565b005b6100b66101763660046104bf565b610353565b6101436101893660046104f2565b610369565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b60006101e8826101c5878787610395565b600882901c60009081526001918201602052604090205460ff9092161b16151590565b95945050505050565b33600090815260016020526040902054806102525760405162461bcd60e51b815260206004820152601f60248201527f51756f72756d3a2063616c6c6572206973206e6f742076616c696461746f7200604482015260640160405180910390fd5b60408051848152602081018490526001600160a01b0386169133917ff5a28e07a1b89d1ca3f9a2a7ef16bd650503a4791baf2e70dc401c21ee505f0a910160405180910390a360006102a5858585610395565b600883901c6000908152600180830160205260409091205491925060ff84161b1661034c57600882901c600090815260018281016020526040909120805460ff85169290921b909117905561031b60027f0000000000000000000000000000000000000000000000000000000000000000610532565b610326906001610554565b816000016000815461033790610567565b91829055500361034c5761034c8585856103c7565b5050505050565b6000610360848484610395565b54949350505050565b6001600160a01b03821660009081526020818152604080832084845290915290205460ff165b92915050565b6001600160a01b0383166000908152600360209081526040808320858452825280832084845290915290209392505050565b6001600160a01b038316600081815260208181526040808320858452825291829020805460ff1916600117905581518581529081018490527fd3e4892959c6ddb27e02bcaaebc0c1898d0f677b7360bf80339f10a8717957d3910160405180910390a2505050565b80356001600160a01b038116811461044657600080fd5b919050565b60006020828403121561045d57600080fd5b6104668261042f565b9392505050565b60006020828403121561047f57600080fd5b5035919050565b6000806000806080858703121561049c57600080fd5b6104a58561042f565b966020860135965060408601359560600135945092505050565b6000806000606084860312156104d457600080fd5b6104dd8461042f565b95602085013595506040909401359392505050565b6000806040838503121561050557600080fd5b61050e8361042f565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008261054f57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561038f5761038f61051c565b6000600182016105795761057961051c565b506001019056fea2646970667358221220642bb94e1d4dd60f0c8a41a3a000c90390997995461f65183db6e55f56e5032864736f6c63430008170033a264697066735822122056fc82af8dbf74e096ba755e657baedd2a8684ccc11e63a53a44d8ceb691249e64736f6c63430008170033",
  "devdoc": {
    "events": {
      "QuorumCreated(address)": {
        "details": "MUST be triggered on a successful call to `newQuorum`.",
        "params": {
          "quorum": "The quorum"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateQuorumAddress(address[],uint256,bytes32)": {
        "details": "Beware that only the `newQuorum` function with the `salt` parameter      is able to deterministically deploy a quorum.",
        "params": {
          "epochLength": "The epoch length",
          "salt": "The salt used to deterministically generate the quorum address",
          "validators": "the list of validators"
        },
        "returns": {
          "_0": "The deterministic quorum address"
        }
      },
      "newQuorum(address[],uint256)": {
        "details": "On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.",
        "params": {
          "epochLength": "The epoch length",
          "validators": "the list of validators"
        },
        "returns": {
          "_0": "The quorum"
        }
      },
      "newQuorum(address[],uint256,bytes32)": {
        "details": "On success, MUST emit a `QuorumCreated` event.Duplicates in the `validators` array are ignored.Reverts if the epoch length is zero.",
        "params": {
          "epochLength": "The epoch length",
          "salt": "The salt used to deterministically generate the quorum address",
          "validators": "the list of validators"
        },
        "returns": {
          "_0": "The quorum"
        }
      }
    },
    "title": "Quorum Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "QuorumCreated(address)": {
        "notice": "A new quorum was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateQuorumAddress(address[],uint256,bytes32)": {
        "notice": "Calculate the address of a quorum to be deployed deterministically."
      },
      "newQuorum(address[],uint256)": {
        "notice": "Deploy a new quorum."
      },
      "newQuorum(address[],uint256,bytes32)": {
        "notice": "Deploy a new quorum deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `IQuorum` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}