{
  "address": "0xFc6c1Fc6546898eb2f9cb7De360B3eA52E601D46",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Authority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateAuthorityAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e3f3887ce26b197fc0c8898030bbcb45d1025d1a87f85b1774a85d27066f48a",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xB25D9D56f5877Ca869A0362c324aCC2F1465AF1B",
    "contractAddress": null,
    "transactionIndex": 108,
    "gasUsed": "548098",
    "logsBloom": "0x
    "blockHash": "0x21f4e7ebee663c85ee9b1080508419e95c6b630172dc36674f513dd50e7adf6c",
    "transactionHash": "0x9e3f3887ce26b197fc0c8898030bbcb45d1025d1a87f85b1774a85d27066f48a",
    "logs": [],
    "blockNumber": 6099740,
    "cumulativeGasUsed": "10193390",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d5e580c56a1973c1da5089d8c687e7bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Authority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateAuthorityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorityCreated(address,address)\":{\"details\":\"MUST be triggered on a successful call to `newAuthority`.\",\"params\":{\"authority\":\"The authority\",\"authorityOwner\":\"The initial authority owner\"}}},\"kind\":\"dev\",\"methods\":{\"calculateAuthorityAddress(address,bytes32)\":{\"details\":\"Beware that only the `newAuthority` function with the `salt` parameter      is able to deterministically deploy an authority.\",\"params\":{\"authorityOwner\":\"The initial authority owner\",\"salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The deterministic authority address\"}},\"newAuthority(address)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.\",\"params\":{\"authorityOwner\":\"The initial authority owner\"},\"returns\":{\"_0\":\"The authority\"}},\"newAuthority(address,bytes32)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.\",\"params\":{\"authorityOwner\":\"The initial authority owner\",\"salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The authority\"}}},\"title\":\"Authority Factory\",\"version\":1},\"userdoc\":{\"events\":{\"AuthorityCreated(address,address)\":{\"notice\":\"A new authority was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateAuthorityAddress(address,bytes32)\":{\"notice\":\"Calculate the address of an authority to be deployed deterministically.\"},\"newAuthority(address)\":{\"notice\":\"Deploy a new authority.\"},\"newAuthority(address,bytes32)\":{\"notice\":\"Deploy a new authority deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `Authority` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/authority/AuthorityFactory.sol\":\"AuthorityFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"contracts/common/InputRange.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice A range of input indices.\\n/// @param firstIndex The index of the first input\\n/// @param lastIndex The index of the last input\\nstruct InputRange {\\n    uint64 firstIndex;\\n    uint64 lastIndex;\\n}\\n\",\"keccak256\":\"0x4825516380f1fb39d5b15e99c1b08e07c636dc062ad3036093e78ba8e624cd33\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice Stores epoch hashes for several applications and input ranges.\\n/// @dev This contract was designed to be inherited by implementations of the `IConsensus` interface\\n/// that only need a simple mechanism of storage and retrieval of epoch hashes.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice Indexes epoch hashes by application contract address, first input index and last input index.\\n    mapping(address => mapping(uint256 => mapping(uint256 => bytes32)))\\n        private _epochHashes;\\n\\n    /// @notice Get the epoch hash for a certain application and input range.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @return epochHash The epoch hash\\n    /// @dev For claimed epochs, returns the epoch hash of the last accepted claim.\\n    /// @dev For unclaimed epochs, returns `bytes32(0)`.\\n    function getEpochHash(\\n        address appContract,\\n        InputRange calldata r\\n    ) public view override returns (bytes32 epochHash) {\\n        epochHash = _epochHashes[appContract][r.firstIndex][r.lastIndex];\\n    }\\n\\n    /// @notice Accept a claim.\\n    /// @param appContract The application contract address\\n    /// @param r The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev On successs, emits a `ClaimAcceptance` event.\\n    function _acceptClaim(\\n        address appContract,\\n        InputRange calldata r,\\n        bytes32 epochHash\\n    ) internal {\\n        _epochHashes[appContract][r.firstIndex][r.lastIndex] = epochHash;\\n        emit ClaimAcceptance(appContract, r, epochHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2e41db152b70de9fe9917780efeba10ea3c0e1a1a2c96b158d81b1129a877eb5\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice Provides data availability of epoch hashes for applications.\\n/// @notice An epoch hash is produced after the machine processes a range of inputs and the epoch is finalized.\\n/// This hash can be later used to prove that any given output was produced by the machine during the epoch.\\n/// @notice After an epoch is finalized, a validator may submit a claim containing the application contract address,\\n/// the range of inputs accepted during the epoch, and the epoch hash.\\n/// @notice Validators may synchronize epoch finalization, but such mechanism is not specified by this interface.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time.\\ninterface IConsensus {\\n    /// @notice MUST trigger when a claim is submitted.\\n    /// @param submitter The submitter address\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev Overwrites any previous submissions regarding `submitter`, `appContract` and `inputRange`.\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed appContract,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice MUST trigger when a claim is accepted.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST be triggered after some `ClaimSubmission` event regarding `appContract`, `inputRange` and `epochHash`.\\n    /// @dev Overwrites any previous acceptances regarding `appContract` and `inputRange`.\\n    event ClaimAcceptance(\\n        address indexed appContract,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST fire a `ClaimSubmission` event.\\n    /// @dev MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.\\n    function submitClaim(\\n        address appContract,\\n        InputRange calldata inputRange,\\n        bytes32 epochHash\\n    ) external;\\n\\n    /// @notice Get the epoch hash for a certain application and input range.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @return epochHash The epoch hash\\n    /// @dev For claimed epochs, must return the epoch hash of the last accepted claim.\\n    /// @dev For unclaimed epochs, MUST either revert or return `bytes32(0)`.\\n    function getEpochHash(\\n        address appContract,\\n        InputRange calldata inputRange\\n    ) external view returns (bytes32 epochHash);\\n}\\n\",\"keccak256\":\"0xd2ea451e450f6b3b01bd77b95dbb00465d263cae9285a03c8ffd0d96c4d75dc1\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/Authority.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {InputRange} from \\\"../../common/InputRange.sol\\\";\\n\\n/// @notice A consensus contract controlled by a single address, the owner.\\n/// @dev This contract inherits from OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract Authority is AbstractConsensus, Ownable {\\n    /// @param initialOwner The initial contract owner\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /// @notice Submit a claim.\\n    /// @param appContract The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev Fires a `ClaimSubmission` event and a `ClaimAcceptance` event.\\n    /// @dev Can only be called by the owner.\\n    function submitClaim(\\n        address appContract,\\n        InputRange calldata inputRange,\\n        bytes32 epochHash\\n    ) external override onlyOwner {\\n        emit ClaimSubmission(msg.sender, appContract, inputRange, epochHash);\\n        _acceptClaim(appContract, inputRange, epochHash);\\n    }\\n}\\n\",\"keccak256\":\"0xe74884532170247ebc0abfd564a8415cac18fafe4e2a1c9a851a369dd7ee4539\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/AuthorityFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IAuthorityFactory} from \\\"./IAuthorityFactory.sol\\\";\\nimport {Authority} from \\\"./Authority.sol\\\";\\n\\n/// @title Authority Factory\\n/// @notice Allows anyone to reliably deploy a new `Authority` contract.\\ncontract AuthorityFactory is IAuthorityFactory {\\n    function newAuthority(\\n        address authorityOwner\\n    ) external override returns (Authority) {\\n        Authority authority = new Authority(authorityOwner);\\n\\n        emit AuthorityCreated(authorityOwner, authority);\\n\\n        return authority;\\n    }\\n\\n    function newAuthority(\\n        address authorityOwner,\\n        bytes32 salt\\n    ) external override returns (Authority) {\\n        Authority authority = new Authority{salt: salt}(authorityOwner);\\n\\n        emit AuthorityCreated(authorityOwner, authority);\\n\\n        return authority;\\n    }\\n\\n    function calculateAuthorityAddress(\\n        address authorityOwner,\\n        bytes32 salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Authority).creationCode,\\n                        abi.encode(authorityOwner)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x216e02503f325929033ea9e19a8ff42ceaa254aabc81fa3749358b4f492a2f05\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/IAuthorityFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Authority} from \\\"./Authority.sol\\\";\\n\\n/// @title Authority Factory interface\\ninterface IAuthorityFactory {\\n    // Events\\n\\n    /// @notice A new authority was deployed.\\n    /// @param authorityOwner The initial authority owner\\n    /// @param authority The authority\\n    /// @dev MUST be triggered on a successful call to `newAuthority`.\\n    event AuthorityCreated(address authorityOwner, Authority authority);\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new authority.\\n    /// @param authorityOwner The initial authority owner\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    function newAuthority(address authorityOwner) external returns (Authority);\\n\\n    /// @notice Deploy a new authority deterministically.\\n    /// @param authorityOwner The initial authority owner\\n    /// @param salt The salt used to deterministically generate the authority address\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    function newAuthority(\\n        address authorityOwner,\\n        bytes32 salt\\n    ) external returns (Authority);\\n\\n    /// @notice Calculate the address of an authority to be deployed deterministically.\\n    /// @param authorityOwner The initial authority owner\\n    /// @param salt The salt used to deterministically generate the authority address\\n    /// @return The deterministic authority address\\n    /// @dev Beware that only the `newAuthority` function with the `salt` parameter\\n    ///      is able to deterministically deploy an authority.\\n    function calculateAuthorityAddress(\\n        address authorityOwner,\\n        bytes32 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb25511358cbebf34bbd3c6e518d55d0235bff4d25de414d96ce3468c7bf7d05a\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108f0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100405760003560e01c80629c5784146100455780635a3f27d314610074578063b3a51b8414610087575b600080fd5b610058610053366004610288565b61009a565b6040516001600160a01b03909116815260200160405180910390f35b610058610082366004610288565b610115565b6100586100953660046102b2565b6101a4565b600061010e82604051806020016100b09061025f565b601f1982820381018352601f9091011660408181526001600160a01b03881660208301520160408051601f19818403018152908290526100f392916020016102fd565b6040516020818303038152906040528051906020012061022d565b9392505050565b60008082846040516101269061025f565b6001600160a01b0390911681526020018190604051809103906000f5905080158015610156573d6000803e3d6000fd5b50604080516001600160a01b038088168252831660208201529192507f0fb2d916aa6a78060ff9e89d89d62797c6668818dec04969013c5098754380ec910160405180910390a19392505050565b600080826040516101b49061025f565b6001600160a01b039091168152602001604051809103906000f0801580156101e0573d6000803e3d6000fd5b50604080516001600160a01b038087168252831660208201529192507f0fb2d916aa6a78060ff9e89d89d62797c6668818dec04969013c5098754380ec910160405180910390a192915050565b600061010e8383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6105a08061031b83390190565b80356001600160a01b038116811461028357600080fd5b919050565b6000806040838503121561029b57600080fd5b6102a48361026c565b946020939093013593505050565b6000602082840312156102c457600080fd5b61010e8261026c565b6000815160005b818110156102ee57602081850181015186830152016102d4565b50600093019283525090919050565b600061031261030c83866102cd565b846102cd565b94935050505056fe608060405234801561001057600080fd5b506040516105a03803806105a083398101604081905261002f916100c0565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161006e565b50506100f0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100d257600080fd5b81516001600160a01b03811681146100e957600080fd5b9392505050565b6104a1806100ff6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c578063866b85fa146100665780638da5cb5b14610079578063c1f59afc14610099578063f2fde38b146100ba575b600080fd5b6100646100cd565b005b61006461007436600461036a565b6100e1565b6001546040516001600160a01b0390911681526020015b60405180910390f35b6100ac6100a73660046103a7565b610146565b604051908152602001610090565b6100646100c83660046103db565b6101bb565b6100d56101fe565b6100df600061022b565b565b6100e96101fe565b826001600160a01b0316336001600160a01b03167f940326476a755934b6ae9d2b36ffcf1f447c3a8223f6d9f8a796b54fbfcce582848460405161012e929190610415565b60405180910390a361014183838361027d565b505050565b6001600160a01b038216600090815260208181526040822090829061016d90850185610450565b67ffffffffffffffff168152602001908152602001600020600083602001602081019061019a9190610450565b67ffffffffffffffff16815260200190815260200160002054905092915050565b6101c36101fe565b6001600160a01b0381166101f257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101fb8161022b565b50565b6001546001600160a01b031633146100df5760405163118cdaa760e01b81523360048201526024016101e9565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166000908152602081815260408220839290916102a590860186610450565b67ffffffffffffffff16815260200190815260200160002060008460200160208101906102d29190610450565b67ffffffffffffffff16815260200190815260200160002081905550826001600160a01b03167f4e068a6b8ed35e6ee03244135874f91ccebb5cd1f3a258a6dc2ad0ebd29884768383604051610329929190610415565b60405180910390a2505050565b80356001600160a01b038116811461034d57600080fd5b919050565b60006040828403121561036457600080fd5b50919050565b60008060006080848603121561037f57600080fd5b61038884610336565b92506103978560208601610352565b9150606084013590509250925092565b600080606083850312156103ba57600080fd5b6103c383610336565b91506103d28460208501610352565b90509250929050565b6000602082840312156103ed57600080fd5b6103f682610336565b9392505050565b803567ffffffffffffffff8116811461034d57600080fd5b6060810167ffffffffffffffff8061042c866103fd565b1683528061043c602087016103fd565b166020840152508260408301529392505050565b60006020828403121561046257600080fd5b6103f6826103fd56fea26469706673582212209daab5af7bf31878a001268a1e530a73c9e116addde25fe1ed74dbd37dd6ab6664736f6c63430008170033a2646970667358221220202385c5d3667fd4673b493ed4c06f5c86e9736d67477efdd7fa7a1f5e0e807164736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100405760003560e01c80629c5784146100455780635a3f27d314610074578063b3a51b8414610087575b600080fd5b610058610053366004610288565b61009a565b6040516001600160a01b03909116815260200160405180910390f35b610058610082366004610288565b610115565b6100586100953660046102b2565b6101a4565b600061010e82604051806020016100b09061025f565b601f1982820381018352601f9091011660408181526001600160a01b03881660208301520160408051601f19818403018152908290526100f392916020016102fd565b6040516020818303038152906040528051906020012061022d565b9392505050565b60008082846040516101269061025f565b6001600160a01b0390911681526020018190604051809103906000f5905080158015610156573d6000803e3d6000fd5b50604080516001600160a01b038088168252831660208201529192507f0fb2d916aa6a78060ff9e89d89d62797c6668818dec04969013c5098754380ec910160405180910390a19392505050565b600080826040516101b49061025f565b6001600160a01b039091168152602001604051809103906000f0801580156101e0573d6000803e3d6000fd5b50604080516001600160a01b038087168252831660208201529192507f0fb2d916aa6a78060ff9e89d89d62797c6668818dec04969013c5098754380ec910160405180910390a192915050565b600061010e8383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6105a08061031b83390190565b80356001600160a01b038116811461028357600080fd5b919050565b6000806040838503121561029b57600080fd5b6102a48361026c565b946020939093013593505050565b6000602082840312156102c457600080fd5b61010e8261026c565b6000815160005b818110156102ee57602081850181015186830152016102d4565b50600093019283525090919050565b600061031261030c83866102cd565b846102cd565b94935050505056fe608060405234801561001057600080fd5b506040516105a03803806105a083398101604081905261002f916100c0565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161006e565b50506100f0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100d257600080fd5b81516001600160a01b03811681146100e957600080fd5b9392505050565b6104a1806100ff6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c578063866b85fa146100665780638da5cb5b14610079578063c1f59afc14610099578063f2fde38b146100ba575b600080fd5b6100646100cd565b005b61006461007436600461036a565b6100e1565b6001546040516001600160a01b0390911681526020015b60405180910390f35b6100ac6100a73660046103a7565b610146565b604051908152602001610090565b6100646100c83660046103db565b6101bb565b6100d56101fe565b6100df600061022b565b565b6100e96101fe565b826001600160a01b0316336001600160a01b03167f940326476a755934b6ae9d2b36ffcf1f447c3a8223f6d9f8a796b54fbfcce582848460405161012e929190610415565b60405180910390a361014183838361027d565b505050565b6001600160a01b038216600090815260208181526040822090829061016d90850185610450565b67ffffffffffffffff168152602001908152602001600020600083602001602081019061019a9190610450565b67ffffffffffffffff16815260200190815260200160002054905092915050565b6101c36101fe565b6001600160a01b0381166101f257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101fb8161022b565b50565b6001546001600160a01b031633146100df5760405163118cdaa760e01b81523360048201526024016101e9565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166000908152602081815260408220839290916102a590860186610450565b67ffffffffffffffff16815260200190815260200160002060008460200160208101906102d29190610450565b67ffffffffffffffff16815260200190815260200160002081905550826001600160a01b03167f4e068a6b8ed35e6ee03244135874f91ccebb5cd1f3a258a6dc2ad0ebd29884768383604051610329929190610415565b60405180910390a2505050565b80356001600160a01b038116811461034d57600080fd5b919050565b60006040828403121561036457600080fd5b50919050565b60008060006080848603121561037f57600080fd5b61038884610336565b92506103978560208601610352565b9150606084013590509250925092565b600080606083850312156103ba57600080fd5b6103c383610336565b91506103d28460208501610352565b90509250929050565b6000602082840312156103ed57600080fd5b6103f682610336565b9392505050565b803567ffffffffffffffff8116811461034d57600080fd5b6060810167ffffffffffffffff8061042c866103fd565b1683528061043c602087016103fd565b166020840152508260408301529392505050565b60006020828403121561046257600080fd5b6103f6826103fd56fea26469706673582212209daab5af7bf31878a001268a1e530a73c9e116addde25fe1ed74dbd37dd6ab6664736f6c63430008170033a2646970667358221220202385c5d3667fd4673b493ed4c06f5c86e9736d67477efdd7fa7a1f5e0e807164736f6c63430008170033",
  "devdoc": {
    "events": {
      "AuthorityCreated(address,address)": {
        "details": "MUST be triggered on a successful call to `newAuthority`.",
        "params": {
          "authority": "The authority",
          "authorityOwner": "The initial authority owner"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateAuthorityAddress(address,bytes32)": {
        "details": "Beware that only the `newAuthority` function with the `salt` parameter      is able to deterministically deploy an authority.",
        "params": {
          "authorityOwner": "The initial authority owner",
          "salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The deterministic authority address"
        }
      },
      "newAuthority(address)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.",
        "params": {
          "authorityOwner": "The initial authority owner"
        },
        "returns": {
          "_0": "The authority"
        }
      },
      "newAuthority(address,bytes32)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.",
        "params": {
          "authorityOwner": "The initial authority owner",
          "salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The authority"
        }
      }
    },
    "title": "Authority Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuthorityCreated(address,address)": {
        "notice": "A new authority was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAuthorityAddress(address,bytes32)": {
        "notice": "Calculate the address of an authority to be deployed deterministically."
      },
      "newAuthority(address)": {
        "notice": "Deploy a new authority."
      },
      "newAuthority(address,bytes32)": {
        "notice": "Deploy a new authority deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `Authority` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}