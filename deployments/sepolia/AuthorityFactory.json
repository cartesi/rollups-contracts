{
  "address": "0xB897F7Fe78f220aE34B7FA9493092701a873Ed45",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateAuthorityAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorityOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93b0ce5a1b8b6cb69ceded19ccf667a1230a51925a00809c3202d387b1c2865f",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xeA4037a524309056545fbAd9A688f449E7e05ffB",
    "contractAddress": null,
    "transactionIndex": 41,
    "gasUsed": "532228",
    "logsBloom": "0x
    "blockHash": "0xb527b55072b0e52ca8325eee566afd4d3343e327285a22036713dd62ed75ebce",
    "transactionHash": "0x93b0ce5a1b8b6cb69ceded19ccf667a1230a51925a00809c3202d387b1c2865f",
    "logs": [],
    "blockNumber": 6850941,
    "cumulativeGasUsed": "4528239",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "3277ebc53d2ec4c7847e5faa9f9b26b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateAuthorityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorityCreated(address)\":{\"details\":\"MUST be triggered on a successful call to `newAuthority`.\",\"params\":{\"authority\":\"The authority\"}}},\"kind\":\"dev\",\"methods\":{\"calculateAuthorityAddress(address,uint256,bytes32)\":{\"details\":\"Beware that only the `newAuthority` function with the `salt` parameter      is able to deterministically deploy an authority.\",\"params\":{\"authorityOwner\":\"The initial authority owner\",\"epochLength\":\"The epoch length\",\"salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The deterministic authority address\"}},\"newAuthority(address,uint256)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.Reverts if the authority owner address is zero.Reverts if the epoch length is zero.\",\"params\":{\"authorityOwner\":\"The initial authority owner\",\"epochLength\":\"The epoch length\"},\"returns\":{\"_0\":\"The authority\"}},\"newAuthority(address,uint256,bytes32)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.Reverts if the authority owner address is zero.Reverts if the epoch length is zero.\",\"params\":{\"authorityOwner\":\"The initial authority owner\",\"epochLength\":\"The epoch length\",\"salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The authority\"}}},\"title\":\"Authority Factory\",\"version\":1},\"userdoc\":{\"events\":{\"AuthorityCreated(address)\":{\"notice\":\"A new authority was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateAuthorityAddress(address,uint256,bytes32)\":{\"notice\":\"Calculate the address of an authority to be deployed deterministically.\"},\"newAuthority(address,uint256)\":{\"notice\":\"Deploy a new authority.\"},\"newAuthority(address,uint256,bytes32)\":{\"notice\":\"Deploy a new authority deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `IAuthority` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/authority/AuthorityFactory.sol\":\"AuthorityFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"contracts/access/IOwnable.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice The interface of OpenZeppelin's `Ownable` contract.\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n    function renounceOwnership() external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x826f366603fe6fd715bd912d40e9b4e851c110aea5895522523d800015532f6d\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\n\\n/// @notice Stores accepted claims for several applications.\\n/// @dev This contract was designed to be inherited by implementations of the `IConsensus` interface\\n/// that only need a simple mechanism of storage and retrieval of accepted claims.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice The epoch length\\n    uint256 private immutable _epochLength;\\n\\n    /// @notice Indexes accepted claims by application contract address.\\n    mapping(address => mapping(bytes32 => bool)) private _acceptedClaims;\\n\\n    /// @param epochLength The epoch length\\n    /// @dev Reverts if the epoch length is zero.\\n    constructor(uint256 epochLength) {\\n        require(epochLength > 0, \\\"epoch length must not be zero\\\");\\n        _epochLength = epochLength;\\n    }\\n\\n    /// @inheritdoc IConsensus\\n    function wasClaimAccepted(\\n        address appContract,\\n        bytes32 claim\\n    ) public view override returns (bool) {\\n        return _acceptedClaims[appContract][claim];\\n    }\\n\\n    /// @inheritdoc IConsensus\\n    function getEpochLength() public view override returns (uint256) {\\n        return _epochLength;\\n    }\\n\\n    /// @notice Accept a claim.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The output Merkle root hash\\n    /// @dev Emits a `ClaimAcceptance` event.\\n    function _acceptClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) internal {\\n        _acceptedClaims[appContract][claim] = true;\\n        emit ClaimAcceptance(appContract, lastProcessedBlockNumber, claim);\\n    }\\n}\\n\",\"keccak256\":\"0x8d94096a285a068e53dfa65f26d4aa8549c3edf0d80e1b3f4322a2df69e141b7\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Each application has its own stream of inputs.\\n/// See the `IInputBox` interface for calldata-based on-chain data availability.\\n/// @notice When an input is fed to the application, it may yield several outputs.\\n/// @notice Since genesis, a Merkle tree of all outputs ever produced is maintained\\n/// both inside and outside the Cartesi Machine.\\n/// @notice The claim that validators may submit to the consensus contract\\n/// is the root of this Merkle tree after processing all base layer blocks until some height.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time or;\\n/// - submitted and proven correct through an on-chain tournament.\\ninterface IConsensus {\\n    /// @notice MUST trigger when a claim is submitted.\\n    /// @param submitter The submitter address\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    );\\n\\n    /// @notice MUST trigger when a claim is accepted.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    event ClaimAcceptance(\\n        address indexed appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    /// @dev MUST fire a `ClaimSubmission` event.\\n    /// @dev MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.\\n    function submitClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external;\\n\\n    /// @notice Check if an output Merkle root hash was ever accepted by the consensus\\n    /// for a particular application.\\n    /// @param appContract The application contract address\\n    /// @param claim The root of the Merkle tree of outputs\\n    function wasClaimAccepted(\\n        address appContract,\\n        bytes32 claim\\n    ) external view returns (bool);\\n\\n    /// @notice Get the epoch length, in number of base layer blocks.\\n    /// @dev The epoch number of a block is defined as\\n    /// the integer division of the block number by the epoch length.\\n    function getEpochLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33ef3c4e213b2a3489b37d5ef553dc1165c598c56beb0ed8290723a5c74d821c\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/Authority.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {IOwnable} from \\\"../../access/IOwnable.sol\\\";\\n\\n/// @notice A consensus contract controlled by a single address, the owner.\\n/// @dev This contract inherits from OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract Authority is IAuthority, AbstractConsensus, Ownable {\\n    /// @param initialOwner The initial contract owner\\n    /// @param epochLength The epoch length\\n    /// @dev Reverts if the epoch length is zero.\\n    constructor(\\n        address initialOwner,\\n        uint256 epochLength\\n    ) AbstractConsensus(epochLength) Ownable(initialOwner) {}\\n\\n    /// @notice Submit a claim.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The output Merkle root hash\\n    /// @dev Fires a `ClaimSubmission` event and a `ClaimAcceptance` event.\\n    /// @dev Can only be called by the owner.\\n    function submitClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external override onlyOwner {\\n        emit ClaimSubmission(\\n            msg.sender,\\n            appContract,\\n            lastProcessedBlockNumber,\\n            claim\\n        );\\n        _acceptClaim(appContract, lastProcessedBlockNumber, claim);\\n    }\\n\\n    function owner() public view override(IOwnable, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    function renounceOwnership() public override(IOwnable, Ownable) {\\n        super.renounceOwnership();\\n    }\\n\\n    function transferOwnership(\\n        address newOwner\\n    ) public override(IOwnable, Ownable) {\\n        super.transferOwnership(newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xaebdc8837598570f415461eb609ec5cfb51da3d2a631d133c83d95211b6fc85b\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/AuthorityFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IAuthorityFactory} from \\\"./IAuthorityFactory.sol\\\";\\nimport {Authority} from \\\"./Authority.sol\\\";\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\n/// @title Authority Factory\\n/// @notice Allows anyone to reliably deploy a new `IAuthority` contract.\\ncontract AuthorityFactory is IAuthorityFactory {\\n    function newAuthority(\\n        address authorityOwner,\\n        uint256 epochLength\\n    ) external override returns (IAuthority) {\\n        IAuthority authority = new Authority(authorityOwner, epochLength);\\n\\n        emit AuthorityCreated(authority);\\n\\n        return authority;\\n    }\\n\\n    function newAuthority(\\n        address authorityOwner,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external override returns (IAuthority) {\\n        IAuthority authority = new Authority{salt: salt}(\\n            authorityOwner,\\n            epochLength\\n        );\\n\\n        emit AuthorityCreated(authority);\\n\\n        return authority;\\n    }\\n\\n    function calculateAuthorityAddress(\\n        address authorityOwner,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Authority).creationCode,\\n                        abi.encode(authorityOwner, epochLength)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xebd3e83da68c6b5173289d5f4f32e5bb4874cad4f3675b8fd90b4187c1656773\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/IAuthority.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IOwnable} from \\\"../../access/IOwnable.sol\\\";\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\n\\n/// @notice A consensus contract controlled by a single address, the owner.\\ninterface IAuthority is IConsensus, IOwnable {}\\n\",\"keccak256\":\"0x6b63b7eb9c7deac1184052e58a2fba6e45bc630f1a38225d35cafbd0d5b98b04\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/authority/IAuthorityFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\n/// @title Authority Factory interface\\ninterface IAuthorityFactory {\\n    // Events\\n\\n    /// @notice A new authority was deployed.\\n    /// @param authority The authority\\n    /// @dev MUST be triggered on a successful call to `newAuthority`.\\n    event AuthorityCreated(IAuthority authority);\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new authority.\\n    /// @param authorityOwner The initial authority owner\\n    /// @param epochLength The epoch length\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    /// @dev Reverts if the authority owner address is zero.\\n    /// @dev Reverts if the epoch length is zero.\\n    function newAuthority(\\n        address authorityOwner,\\n        uint256 epochLength\\n    ) external returns (IAuthority);\\n\\n    /// @notice Deploy a new authority deterministically.\\n    /// @param authorityOwner The initial authority owner\\n    /// @param epochLength The epoch length\\n    /// @param salt The salt used to deterministically generate the authority address\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    /// @dev Reverts if the authority owner address is zero.\\n    /// @dev Reverts if the epoch length is zero.\\n    function newAuthority(\\n        address authorityOwner,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external returns (IAuthority);\\n\\n    /// @notice Calculate the address of an authority to be deployed deterministically.\\n    /// @param authorityOwner The initial authority owner\\n    /// @param epochLength The epoch length\\n    /// @param salt The salt used to deterministically generate the authority address\\n    /// @return The deterministic authority address\\n    /// @dev Beware that only the `newAuthority` function with the `salt` parameter\\n    ///      is able to deterministically deploy an authority.\\n    function calculateAuthorityAddress(\\n        address authorityOwner,\\n        uint256 epochLength,\\n        bytes32 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05bde19d7cbd2bed92a9d81baa60b7e24b00b99f3656b67515b0903e5a920d46\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631442f7bb1461004657806393d7217c14610075578063ec99266814610088575b600080fd5b61005961005436600461029d565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102d0565b61011e565b61005961009636600461029d565b6101a7565b600061011682604051806020016100b190610274565b601f1982820381018352601f9091011660408181526001600160a01b0389166020830152810187905260600160408051601f19818403018152908290526100fb929160200161032a565b60405160208183030381529060405280519060200120610236565b949350505050565b600080838360405161012f90610274565b6001600160a01b0390921682526020820152604001604051809103906000f080158015610160573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f9060200160405180910390a19392505050565b6000808285856040516101b990610274565b6001600160a01b03909216825260208201526040018190604051809103906000f59050801580156101ee573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f9060200160405180910390a1949350505050565b600061024383833061024a565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6105338061034083390190565b80356001600160a01b038116811461029857600080fd5b919050565b6000806000606084860312156102b257600080fd5b6102bb84610281565b95602085013595506040909401359392505050565b600080604083850312156102e357600080fd5b6102ec83610281565b946020939093013593505050565b6000815160005b8181101561031b5760208185018101518683015201610301565b50600093019283525090919050565b600061011661033983866102fa565b846102fa56fe60a060405234801561001057600080fd5b5060405161053338038061053383398101604081905261002f91610116565b8181600081116100865760405162461bcd60e51b815260206004820152601d60248201527f65706f6368206c656e677468206d757374206e6f74206265207a65726f00000060448201526064015b60405180910390fd5b6080526001600160a01b0381166100b357604051631e4fbdf760e01b81526000600482015260240161007d565b6100bc816100c4565b505050610150565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806040838503121561012957600080fd5b82516001600160a01b038116811461014057600080fd5b6020939093015192949293505050565b6080516103c961016a600039600060f501526103c96000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636470af0014610067578063715018a61461007c5780638da5cb5b146100845780639618f35b146100a9578063cfe8a73b146100f0578063f2fde38b1461011e575b600080fd5b61007a610075366004610314565b610131565b005b61007a61018f565b61008c610199565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100b7366004610347565b6001600160a01b0391909116600090815260208181526040808320938352929052205460ff1690565b60405190151581526020016100a0565b6040517f000000000000000000000000000000000000000000000000000000000000000081526020016100a0565b61007a61012c366004610371565b6101b2565b6101396101be565b60408051838152602081018390526001600160a01b0385169133917ff5a28e07a1b89d1ca3f9a2a7ef16bd650503a4791baf2e70dc401c21ee505f0a910160405180910390a361018a8383836101f5565b505050565b61019761025d565b565b60006101ad6001546001600160a01b031690565b905090565b6101bb8161026f565b50565b336101c7610199565b6001600160a01b0316146101975760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b6001600160a01b038316600081815260208181526040808320858452825291829020805460ff1916600117905581518581529081018490527fd3e4892959c6ddb27e02bcaaebc0c1898d0f677b7360bf80339f10a8717957d3910160405180910390a2505050565b6102656101be565b61019760006102a6565b6102776101be565b6001600160a01b0381166102a157604051631e4fbdf760e01b8152600060048201526024016101ec565b6101bb815b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b038116811461030f57600080fd5b919050565b60008060006060848603121561032957600080fd5b610332846102f8565b95602085013595506040909401359392505050565b6000806040838503121561035a57600080fd5b610363836102f8565b946020939093013593505050565b60006020828403121561038357600080fd5b61038c826102f8565b939250505056fea2646970667358221220fdfd7afacb990763bde79c74a424d800d5b6d84b9946a046eab3844941271e9864736f6c63430008170033a2646970667358221220cea85fc9e89ea5b4ed137a747c8c035c923896b73e090001968db6647ef1226864736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631442f7bb1461004657806393d7217c14610075578063ec99266814610088575b600080fd5b61005961005436600461029d565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102d0565b61011e565b61005961009636600461029d565b6101a7565b600061011682604051806020016100b190610274565b601f1982820381018352601f9091011660408181526001600160a01b0389166020830152810187905260600160408051601f19818403018152908290526100fb929160200161032a565b60405160208183030381529060405280519060200120610236565b949350505050565b600080838360405161012f90610274565b6001600160a01b0390921682526020820152604001604051809103906000f080158015610160573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f9060200160405180910390a19392505050565b6000808285856040516101b990610274565b6001600160a01b03909216825260208201526040018190604051809103906000f59050801580156101ee573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f9060200160405180910390a1949350505050565b600061024383833061024a565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6105338061034083390190565b80356001600160a01b038116811461029857600080fd5b919050565b6000806000606084860312156102b257600080fd5b6102bb84610281565b95602085013595506040909401359392505050565b600080604083850312156102e357600080fd5b6102ec83610281565b946020939093013593505050565b6000815160005b8181101561031b5760208185018101518683015201610301565b50600093019283525090919050565b600061011661033983866102fa565b846102fa56fe60a060405234801561001057600080fd5b5060405161053338038061053383398101604081905261002f91610116565b8181600081116100865760405162461bcd60e51b815260206004820152601d60248201527f65706f6368206c656e677468206d757374206e6f74206265207a65726f00000060448201526064015b60405180910390fd5b6080526001600160a01b0381166100b357604051631e4fbdf760e01b81526000600482015260240161007d565b6100bc816100c4565b505050610150565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806040838503121561012957600080fd5b82516001600160a01b038116811461014057600080fd5b6020939093015192949293505050565b6080516103c961016a600039600060f501526103c96000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636470af0014610067578063715018a61461007c5780638da5cb5b146100845780639618f35b146100a9578063cfe8a73b146100f0578063f2fde38b1461011e575b600080fd5b61007a610075366004610314565b610131565b005b61007a61018f565b61008c610199565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100b7366004610347565b6001600160a01b0391909116600090815260208181526040808320938352929052205460ff1690565b60405190151581526020016100a0565b6040517f000000000000000000000000000000000000000000000000000000000000000081526020016100a0565b61007a61012c366004610371565b6101b2565b6101396101be565b60408051838152602081018390526001600160a01b0385169133917ff5a28e07a1b89d1ca3f9a2a7ef16bd650503a4791baf2e70dc401c21ee505f0a910160405180910390a361018a8383836101f5565b505050565b61019761025d565b565b60006101ad6001546001600160a01b031690565b905090565b6101bb8161026f565b50565b336101c7610199565b6001600160a01b0316146101975760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b6001600160a01b038316600081815260208181526040808320858452825291829020805460ff1916600117905581518581529081018490527fd3e4892959c6ddb27e02bcaaebc0c1898d0f677b7360bf80339f10a8717957d3910160405180910390a2505050565b6102656101be565b61019760006102a6565b6102776101be565b6001600160a01b0381166102a157604051631e4fbdf760e01b8152600060048201526024016101ec565b6101bb815b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b038116811461030f57600080fd5b919050565b60008060006060848603121561032957600080fd5b610332846102f8565b95602085013595506040909401359392505050565b6000806040838503121561035a57600080fd5b610363836102f8565b946020939093013593505050565b60006020828403121561038357600080fd5b61038c826102f8565b939250505056fea2646970667358221220fdfd7afacb990763bde79c74a424d800d5b6d84b9946a046eab3844941271e9864736f6c63430008170033a2646970667358221220cea85fc9e89ea5b4ed137a747c8c035c923896b73e090001968db6647ef1226864736f6c63430008170033",
  "devdoc": {
    "events": {
      "AuthorityCreated(address)": {
        "details": "MUST be triggered on a successful call to `newAuthority`.",
        "params": {
          "authority": "The authority"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateAuthorityAddress(address,uint256,bytes32)": {
        "details": "Beware that only the `newAuthority` function with the `salt` parameter      is able to deterministically deploy an authority.",
        "params": {
          "authorityOwner": "The initial authority owner",
          "epochLength": "The epoch length",
          "salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The deterministic authority address"
        }
      },
      "newAuthority(address,uint256)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.Reverts if the authority owner address is zero.Reverts if the epoch length is zero.",
        "params": {
          "authorityOwner": "The initial authority owner",
          "epochLength": "The epoch length"
        },
        "returns": {
          "_0": "The authority"
        }
      },
      "newAuthority(address,uint256,bytes32)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.Reverts if the authority owner address is zero.Reverts if the epoch length is zero.",
        "params": {
          "authorityOwner": "The initial authority owner",
          "epochLength": "The epoch length",
          "salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The authority"
        }
      }
    },
    "title": "Authority Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuthorityCreated(address)": {
        "notice": "A new authority was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAuthorityAddress(address,uint256,bytes32)": {
        "notice": "Calculate the address of an authority to be deployed deterministically."
      },
      "newAuthority(address,uint256)": {
        "notice": "Deploy a new authority."
      },
      "newAuthority(address,uint256,bytes32)": {
        "notice": "Deploy a new authority deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `IAuthority` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}