{
  "address": "0x1d4CfBD2622d802A07CeB4C3401Bbb455c9dbdC3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract IApplication",
          "name": "appContract",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateApplicationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "contract IApplication",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "contract IApplication",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d931724a9051a350b832dc1272786b646fd96c1317a0e534fa801b06b13340e",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": null,
    "transactionIndex": 30,
    "gasUsed": "1273228",
    "logsBloom": "0x
    "blockHash": "0x348df71d08461959d26c5e2603fc643ca7dc1e0f129968bcc7c236558339a9f1",
    "transactionHash": "0x6d931724a9051a350b832dc1272786b646fd96c1317a0e534fa801b06b13340e",
    "logs": [],
    "blockNumber": 17027022,
    "cumulativeGasUsed": "8573886",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3f90f7284d022e9cc827655f4d93f4f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IApplication\",\"name\":\"appContract\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateApplicationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"contract IApplication\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"contract IApplication\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApplicationCreated(address,address,bytes32,address)\":{\"details\":\"MUST be triggered on a successful call to `newApplication`.\",\"params\":{\"appContract\":\"The application contract\",\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"templateHash\":\"The initial machine state hash\"}}},\"kind\":\"dev\",\"methods\":{\"calculateApplicationAddress(address,address,bytes32,bytes32)\":{\"details\":\"Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.\",\"params\":{\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"salt\":\"The salt used to deterministically generate the application contract address\",\"templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The deterministic application contract address\"}},\"newApplication(address,address,bytes32)\":{\"details\":\"On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.\",\"params\":{\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The application\"}},\"newApplication(address,address,bytes32,bytes32)\":{\"details\":\"On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.\",\"params\":{\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"salt\":\"The salt used to deterministically generate the application contract address\",\"templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The application\"}}},\"title\":\"Application Factory\",\"version\":1},\"userdoc\":{\"events\":{\"ApplicationCreated(address,address,bytes32,address)\":{\"notice\":\"A new application was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateApplicationAddress(address,address,bytes32,bytes32)\":{\"notice\":\"Calculate the address of an application contract to be deployed deterministically.\"},\"newApplication(address,address,bytes32)\":{\"notice\":\"Deploy a new application.\"},\"newApplication(address,address,bytes32,bytes32)\":{\"notice\":\"Deploy a new application deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `IApplication` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dapp/ApplicationFactory.sol\":\"ApplicationFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"contracts/access/IOwnable.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice The interface of OpenZeppelin's `Ownable` contract.\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n    function renounceOwnership() external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x826f366603fe6fd715bd912d40e9b4e851c110aea5895522523d800015532f6d\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/CanonicalMachine.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\\"Cartesi Machine\\\".\\nlibrary CanonicalMachine {\\n    /// @notice Maximum input size (2 megabytes).\\n    uint256 constant INPUT_MAX_SIZE = 1 << 21;\\n\\n    /// @notice Log2 of maximum number of outputs.\\n    uint256 constant LOG2_MAX_OUTPUTS = 63;\\n}\\n\",\"keccak256\":\"0xd433ed779b77fa74a86514a17eb76c9d4f250c5506a223541eb12963192d7ce0\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/OutputValidityProof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Proof of inclusion of an output in the output Merkle tree.\\n/// @param outputIndex Index of output in the Merkle tree\\n/// @param outputHashesSiblings Siblings of the output in the Merkle tree\\n/// @dev From the index and siblings, one can calculate the root of the Merkle tree.\\n/// @dev The siblings array should have size equal to the log2 of the maximum number of outputs.\\n/// @dev See the `CanonicalMachine` library for constants.\\nstruct OutputValidityProof {\\n    uint64 outputIndex;\\n    bytes32[] outputHashesSiblings;\\n}\\n\",\"keccak256\":\"0x3bd009e3b744e160f92a84624f8c325b5a6abc8f4e8e02e4a1b8a6de73779c1c\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/Outputs.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Outputs\\n/// @notice Defines the signatures of outputs that can be generated by the\\n/// off-chain machine and verified by the on-chain contracts.\\ninterface Outputs {\\n    /// @notice A piece of verifiable information.\\n    /// @param payload An arbitrary payload.\\n    function Notice(bytes calldata payload) external;\\n\\n    /// @notice A single-use permission to execute a specific message call\\n    /// from the context of the application contract.\\n    /// @param destination The address that will be called\\n    /// @param value The amount of Wei to be transferred through the call\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// contracts\\u2014encodes a function call\\n    function Voucher(\\n        address destination,\\n        uint256 value,\\n        bytes calldata payload\\n    ) external;\\n\\n    /// @notice A single-use permission to execute a specific delegate call\\n    /// from the context of the application contract.\\n    /// @param destination The address that will be called\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// libraries\\u2014encodes a function call\\n    function DelegateCallVoucher(\\n        address destination,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaee9d71104bfe2fab21d4e26f3ed802439d6c2e1bc5aeb9bfc5090f4083bd542\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Each application has its own stream of inputs.\\n/// See the `IInputBox` interface for calldata-based on-chain data availability.\\n/// @notice When an input is fed to the application, it may yield several outputs.\\n/// @notice Since genesis, a Merkle tree of all outputs ever produced is maintained\\n/// both inside and outside the Cartesi Machine.\\n/// @notice The claim that validators may submit to the consensus contract\\n/// is the root of this Merkle tree after processing all base layer blocks until some height.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time or;\\n/// - submitted and proven correct through an on-chain tournament.\\ninterface IConsensus {\\n    /// @notice MUST trigger when a claim is submitted.\\n    /// @param submitter The submitter address\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    );\\n\\n    /// @notice MUST trigger when a claim is accepted.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    event ClaimAcceptance(\\n        address indexed appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param appContract The application contract address\\n    /// @param lastProcessedBlockNumber The number of the last processed block\\n    /// @param claim The root of the Merkle tree of outputs\\n    /// @dev MUST fire a `ClaimSubmission` event.\\n    /// @dev MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.\\n    function submitClaim(\\n        address appContract,\\n        uint256 lastProcessedBlockNumber,\\n        bytes32 claim\\n    ) external;\\n\\n    /// @notice Check if an output Merkle root hash was ever accepted by the consensus\\n    /// for a particular application.\\n    /// @param appContract The application contract address\\n    /// @param claim The root of the Merkle tree of outputs\\n    function wasClaimAccepted(\\n        address appContract,\\n        bytes32 claim\\n    ) external view returns (bool);\\n\\n    /// @notice Get the epoch length, in number of base layer blocks.\\n    /// @dev The epoch number of a block is defined as\\n    /// the integer division of the block number by the epoch length.\\n    function getEpochLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33ef3c4e213b2a3489b37d5ef553dc1165c598c56beb0ed8290723a5c74d821c\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/Application.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IApplication} from \\\"./IApplication.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {LibOutputValidityProof} from \\\"../library/LibOutputValidityProof.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\nimport {Outputs} from \\\"../common/Outputs.sol\\\";\\nimport {LibAddress} from \\\"../library/LibAddress.sol\\\";\\nimport {IOwnable} from \\\"../access/IOwnable.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\ncontract Application is\\n    IApplication,\\n    Ownable,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n    using LibAddress for address;\\n    using LibOutputValidityProof for OutputValidityProof;\\n\\n    /// @notice The initial machine state hash.\\n    /// @dev See the `getTemplateHash` function.\\n    bytes32 internal immutable _templateHash;\\n\\n    /// @notice Keeps track of which outputs have been executed.\\n    /// @dev See the `wasOutputExecuted` function.\\n    BitMaps.BitMap internal _executed;\\n\\n    /// @notice The current consensus contract.\\n    /// @dev See the `getConsensus` and `migrateToConsensus` functions.\\n    IConsensus internal _consensus;\\n\\n    /// @notice Creates an `Application` contract.\\n    /// @param consensus The initial consensus contract\\n    /// @param initialOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @dev Reverts if the initial application owner address is zero.\\n    constructor(\\n        IConsensus consensus,\\n        address initialOwner,\\n        bytes32 templateHash\\n    ) Ownable(initialOwner) {\\n        _templateHash = templateHash;\\n        _consensus = consensus;\\n    }\\n\\n    /// @notice Accept Ether transfers.\\n    /// @dev If you wish to transfer Ether to an application while informing\\n    ///      the backend of it, then please do so through the Ether portal contract.\\n    receive() external payable {}\\n\\n    function executeOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) external override nonReentrant {\\n        validateOutput(output, proof);\\n\\n        uint64 outputIndex = proof.outputIndex;\\n\\n        if (output.length < 4) {\\n            revert OutputNotExecutable(output);\\n        }\\n\\n        bytes4 selector = bytes4(output[:4]);\\n        bytes calldata arguments = output[4:];\\n\\n        if (selector == Outputs.Voucher.selector) {\\n            if (_executed.get(outputIndex)) {\\n                revert OutputNotReexecutable(output);\\n            }\\n            _executeVoucher(arguments);\\n        } else if (selector == Outputs.DelegateCallVoucher.selector) {\\n            if (_executed.get(outputIndex)) {\\n                revert OutputNotReexecutable(output);\\n            }\\n            _executeDelegateCallVoucher(arguments);\\n        } else {\\n            revert OutputNotExecutable(output);\\n        }\\n\\n        _executed.set(outputIndex);\\n        emit OutputExecuted(outputIndex, output);\\n    }\\n\\n    function migrateToConsensus(\\n        IConsensus newConsensus\\n    ) external override onlyOwner {\\n        _consensus = newConsensus;\\n        emit NewConsensus(newConsensus);\\n    }\\n\\n    function wasOutputExecuted(\\n        uint256 outputIndex\\n    ) external view override returns (bool) {\\n        return _executed.get(outputIndex);\\n    }\\n\\n    function validateOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) public view override {\\n        validateOutputHash(keccak256(output), proof);\\n    }\\n\\n    function validateOutputHash(\\n        bytes32 outputHash,\\n        OutputValidityProof calldata proof\\n    ) public view override {\\n        if (!proof.isSiblingsArrayLengthValid()) {\\n            revert InvalidOutputHashesSiblingsArrayLength();\\n        }\\n\\n        bytes32 claim = proof.computeClaim(outputHash);\\n\\n        if (!_wasClaimAccepted(claim)) {\\n            revert ClaimNotAccepted(claim);\\n        }\\n    }\\n\\n    function getTemplateHash() external view override returns (bytes32) {\\n        return _templateHash;\\n    }\\n\\n    function getConsensus() external view override returns (IConsensus) {\\n        return _consensus;\\n    }\\n\\n    function owner() public view override(IOwnable, Ownable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    function renounceOwnership() public override(IOwnable, Ownable) {\\n        super.renounceOwnership();\\n    }\\n\\n    function transferOwnership(\\n        address newOwner\\n    ) public override(IOwnable, Ownable) {\\n        super.transferOwnership(newOwner);\\n    }\\n\\n    /// @notice Check if an output Merkle root hash was ever accepted by the current consensus.\\n    /// @param claim The output Merkle root hash\\n    function _wasClaimAccepted(bytes32 claim) internal view returns (bool) {\\n        return _consensus.wasClaimAccepted(address(this), claim);\\n    }\\n\\n    /// @notice Executes a voucher\\n    /// @param arguments ABI-encoded arguments\\n    function _executeVoucher(bytes calldata arguments) internal {\\n        address destination;\\n        uint256 value;\\n        bytes memory payload;\\n\\n        (destination, value, payload) = abi.decode(\\n            arguments,\\n            (address, uint256, bytes)\\n        );\\n\\n        destination.safeCall(value, payload);\\n    }\\n\\n    /// @notice Executes a delegatecall voucher\\n    /// @param arguments ABI-encoded arguments\\n    function _executeDelegateCallVoucher(bytes calldata arguments) internal {\\n        address destination;\\n        bytes memory payload;\\n\\n        (destination, payload) = abi.decode(arguments, (address, bytes));\\n\\n        destination.safeDelegateCall(payload);\\n    }\\n}\\n\",\"keccak256\":\"0xf6a70450836fc4d5dec47a4df10c139870b8279d34ae05b8e0710a7153e045e8\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/ApplicationFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IApplicationFactory} from \\\"./IApplicationFactory.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {Application} from \\\"./Application.sol\\\";\\nimport {IApplication} from \\\"./IApplication.sol\\\";\\n\\n/// @title Application Factory\\n/// @notice Allows anyone to reliably deploy a new `IApplication` contract.\\ncontract ApplicationFactory is IApplicationFactory {\\n    function newApplication(\\n        IConsensus consensus,\\n        address appOwner,\\n        bytes32 templateHash\\n    ) external override returns (IApplication) {\\n        IApplication appContract = new Application(\\n            consensus,\\n            appOwner,\\n            templateHash\\n        );\\n\\n        emit ApplicationCreated(consensus, appOwner, templateHash, appContract);\\n\\n        return appContract;\\n    }\\n\\n    function newApplication(\\n        IConsensus consensus,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external override returns (IApplication) {\\n        IApplication appContract = new Application{salt: salt}(\\n            consensus,\\n            appOwner,\\n            templateHash\\n        );\\n\\n        emit ApplicationCreated(consensus, appOwner, templateHash, appContract);\\n\\n        return appContract;\\n    }\\n\\n    function calculateApplicationAddress(\\n        IConsensus consensus,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Application).creationCode,\\n                        abi.encode(consensus, appOwner, templateHash)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfb2191314998c855167aa5f4499ed36b624a167d9f2374a23ff16fe7d3365305\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/IApplication.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IOwnable} from \\\"../access/IOwnable.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\n\\n/// @notice The base layer incarnation of an application running on the execution layer.\\n/// @notice The state of the application advances through inputs sent to an `IInputBox` contract.\\n/// @notice These inputs can be sent either directly, or indirectly through portals.\\n/// @notice Reader nodes can retrieve inputs sent to the `IInputBox` contract through events, and feed them into the machine.\\n/// @notice Validator nodes can also submit claims to the `IConsensus` contract (see the `getConsensus` function).\\n/// @notice Once accepted, claims can be used to validate outputs generated by the machine.\\n/// @notice Some outputs are executable, which means they can have on-chain side effects.\\n/// @notice Every application is subscribed to some consensus, and may be governed by some owner.\\n/// The consensus has the power to accept claims, which, in turn, are used to validate outputs.\\n/// Meanwhile, the owner can replace the consensus at any time.\\n/// Therefore, the users of an application must trust both the consensus and the application owner.\\n/// @notice There are several ownership models to choose from:\\n/// - no owner (address zero)\\n/// - individual signer (externally-owned account)\\n/// - multiple signers (multi-sig)\\n/// - DAO (decentralized autonomous organization)\\n/// - self-owned application (off-chain governance logic)\\n/// @notice See `IConsensus` for examples of consensus models.\\ninterface IApplication is IOwnable {\\n    // Events\\n\\n    /// @notice MUST trigger when a new consensus is chosen.\\n    /// @param newConsensus The new consensus\\n    event NewConsensus(IConsensus newConsensus);\\n\\n    /// @notice MUST trigger when an output is executed.\\n    /// @param outputIndex The index of the output\\n    /// @param output The output\\n    event OutputExecuted(uint64 outputIndex, bytes output);\\n\\n    // Errors\\n\\n    /// @notice Could not execute an output, because the application contract doesn't know how to.\\n    /// @param output The output\\n    error OutputNotExecutable(bytes output);\\n\\n    /// @notice Could not execute an output, because it was already executed.\\n    /// @param output The output\\n    error OutputNotReexecutable(bytes output);\\n\\n    /// @notice Raised when the output hashes siblings array has an invalid size.\\n    /// @dev Please consult `CanonicalMachine` for the maximum number of outputs.\\n    error InvalidOutputHashesSiblingsArrayLength();\\n\\n    /// @notice Raised when the required claim was not accepted by the current consensus.\\n    error ClaimNotAccepted(bytes32 claim);\\n\\n    // Permissioned functions\\n\\n    /// @notice Migrate the application to a new consensus.\\n    /// @param newConsensus The new consensus\\n    /// @dev Can only be called by the application owner.\\n    function migrateToConsensus(IConsensus newConsensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Execute an output.\\n    /// @param output The output\\n    /// @param proof The proof used to validate the output against\\n    ///              a claim submitted to the current consensus contract\\n    /// @dev On a successful execution, emits a `OutputExecuted` event.\\n    /// @dev May raise any of the errors raised by `validateOutput`,\\n    /// as well as `OutputNotExecutable` and `OutputNotReexecutable`.\\n    function executeOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) external;\\n\\n    /// @notice Check whether an output has been executed.\\n    /// @param outputIndex The index of output\\n    /// @return Whether the output has been executed before\\n    function wasOutputExecuted(\\n        uint256 outputIndex\\n    ) external view returns (bool);\\n\\n    /// @notice Validate an output.\\n    /// @param output The output\\n    /// @param proof The proof used to validate the output against\\n    ///              a claim submitted to the current consensus contract\\n    /// @dev May raise any of the errors raised by `validateOutputHash`.\\n    function validateOutput(\\n        bytes calldata output,\\n        OutputValidityProof calldata proof\\n    ) external view;\\n\\n    /// @notice Validate an output hash.\\n    /// @param outputHash The output hash\\n    /// @param proof The proof used to validate the output against\\n    ///              a claim submitted to the current consensus contract\\n    /// @dev May raise `InvalidOutputHashesSiblingsArrayLength`\\n    /// or `ClaimNotAccepted`.\\n    function validateOutputHash(\\n        bytes32 outputHash,\\n        OutputValidityProof calldata proof\\n    ) external view;\\n\\n    /// @notice Get the application's template hash.\\n    /// @return The application's template hash\\n    function getTemplateHash() external view returns (bytes32);\\n\\n    /// @notice Get the current consensus.\\n    /// @return The current consensus\\n    function getConsensus() external view returns (IConsensus);\\n}\\n\",\"keccak256\":\"0x64ca7d1d00fe6eebb633ba07011bd73036360166bd8b75755f55e8f0f51c45ab\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/IApplicationFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IApplication} from \\\"./IApplication.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\n\\n/// @title Application Factory interface\\ninterface IApplicationFactory {\\n    // Events\\n\\n    /// @notice A new application was deployed.\\n    /// @param consensus The initial consensus contract\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param appContract The application contract\\n    /// @dev MUST be triggered on a successful call to `newApplication`.\\n    event ApplicationCreated(\\n        IConsensus indexed consensus,\\n        address appOwner,\\n        bytes32 templateHash,\\n        IApplication appContract\\n    );\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new application.\\n    /// @param consensus The initial consensus contract\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    /// @dev Reverts if the application owner address is zero.\\n    function newApplication(\\n        IConsensus consensus,\\n        address appOwner,\\n        bytes32 templateHash\\n    ) external returns (IApplication);\\n\\n    /// @notice Deploy a new application deterministically.\\n    /// @param consensus The initial consensus contract\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param salt The salt used to deterministically generate the application contract address\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    /// @dev Reverts if the application owner address is zero.\\n    function newApplication(\\n        IConsensus consensus,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external returns (IApplication);\\n\\n    /// @notice Calculate the address of an application contract to be deployed deterministically.\\n    /// @param consensus The initial consensus contract\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param salt The salt used to deterministically generate the application contract address\\n    /// @return The deterministic application contract address\\n    /// @dev Beware that only the `newApplication` function with the `salt` parameter\\n    ///      is able to deterministically deploy an application.\\n    function calculateApplicationAddress(\\n        IConsensus consensus,\\n        address appOwner,\\n        bytes32 templateHash,\\n        bytes32 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8b3aab57aebe723265d1b1cad7c5d4c8ad944850b8b7c92f3c9cfade75f27197\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibAddress.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {LibError} from \\\"../library/LibError.sol\\\";\\n\\nlibrary LibAddress {\\n    using LibError for bytes;\\n\\n    /// @notice Perform a low level call and raise error if failed\\n    /// @param destination The address that will be called\\n    /// @param value The amount of Wei to be transferred through the call\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// contracts\\u2014encodes a function call\\n    function safeCall(\\n        address destination,\\n        uint256 value,\\n        bytes memory payload\\n    ) internal {\\n        bool success;\\n        bytes memory returndata;\\n\\n        (success, returndata) = destination.call{value: value}(payload);\\n\\n        if (!success) {\\n            returndata.raise();\\n        }\\n    }\\n\\n    /// @notice Perform a delegate call and raise error if failed\\n    /// @param destination The address that will be called\\n    /// @param payload The payload, which\\u2014in the case of Solidity\\n    /// libraries\\u2014encodes a function call\\n    function safeDelegateCall(\\n        address destination,\\n        bytes memory payload\\n    ) internal {\\n        bool success;\\n        bytes memory returndata;\\n\\n        (success, returndata) = destination.delegatecall(payload);\\n\\n        if (!success) {\\n            returndata.raise();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcae26d227ecb61fe953e6a5937037529b02fd929f6857151661121d6d233c0ac\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibError.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary LibError {\\n    /// @notice Raise error data\\n    /// @param errordata Data returned by failed low-level call\\n    function raise(bytes memory errordata) internal pure {\\n        if (errordata.length == 0) {\\n            revert();\\n        } else {\\n            assembly {\\n                revert(add(32, errordata), mload(errordata))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d5f9497f40e172fe1a0b9e2635cd4b14c4c3d16bcfd851db034273573aae37d\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibMerkle32.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.22;\\n\\n/// @title Merkle library for trees of 32-byte leaves\\n/// @notice This library is meant for creating and verifying Merkle proofs.\\n/// @notice Each Merkle tree is assumed to have `2^height` leaves.\\n/// @notice Nodes are concatenated pairwise and hashed with `keccak256`.\\n/// @notice Siblings are in bottom-up order, from leaf to root.\\nlibrary LibMerkle32 {\\n    using LibMerkle32 for bytes32[];\\n\\n    /// @notice Compute the root of a Merkle tree from its leaves.\\n    /// @param leaves The left-most leaves of the Merkle tree\\n    /// @param height The height of the Merkle tree\\n    /// @return The root hash of the Merkle tree\\n    /// @dev Raises an error if more than `2^height` leaves are provided.\\n    function merkleRoot(\\n        bytes32[] memory leaves,\\n        uint256 height\\n    ) internal pure returns (bytes32) {\\n        bytes32 defaultNode;\\n        for (uint256 i; i < height; ++i) {\\n            leaves = leaves.parentLevel(defaultNode);\\n            defaultNode = parent(defaultNode, defaultNode);\\n        }\\n        require(leaves.length <= 1, \\\"LibMerkle32: too many leaves\\\");\\n        return leaves.at(0, defaultNode);\\n    }\\n\\n    /// @notice Compute the siblings of the ancestors of a leaf in a Merkle tree.\\n    /// @param leaves The left-most leaves of the Merkle tree\\n    /// @param index The index of the leaf\\n    /// @param height The height of the Merkle tree\\n    /// @return The siblings of the ancestors of the leaf in bottom-up order\\n    /// @dev Raises an error if the provided index is out of bounds.\\n    /// @dev Raises an error if more than `2^height` leaves are provided.\\n    function siblings(\\n        bytes32[] memory leaves,\\n        uint256 index,\\n        uint256 height\\n    ) internal pure returns (bytes32[] memory) {\\n        bytes32[] memory sibs = new bytes32[](height);\\n        bytes32 defaultNode;\\n        for (uint256 i; i < height; ++i) {\\n            sibs[i] = leaves.at(index ^ 1, defaultNode);\\n            leaves = leaves.parentLevel(defaultNode);\\n            defaultNode = parent(defaultNode, defaultNode);\\n            index >>= 1;\\n        }\\n        require(index == 0, \\\"LibMerkle32: index out of bounds\\\");\\n        require(leaves.length <= 1, \\\"LibMerkle32: too many leaves\\\");\\n        return sibs;\\n    }\\n\\n    /// @notice Compute the root of a Merkle tree after replacing one of its leaves.\\n    /// @param sibs The siblings of the ancestors of the leaf in bottom-up order\\n    /// @param index The index of the leaf\\n    /// @param leaf The new leaf\\n    /// @return The root hash of the new Merkle tree\\n    /// @dev Raises an error if the provided index is out of bounds.\\n    function merkleRootAfterReplacement(\\n        bytes32[] calldata sibs,\\n        uint256 index,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32) {\\n        uint256 height = sibs.length;\\n        for (uint256 i; i < height; ++i) {\\n            bytes32 sibling = sibs[i];\\n            if (index & 1 == 0) {\\n                leaf = parent(leaf, sibling);\\n            } else {\\n                leaf = parent(sibling, leaf);\\n            }\\n            index >>= 1;\\n        }\\n        require(index == 0, \\\"LibMerkle32: index out of bounds\\\");\\n        return leaf;\\n    }\\n\\n    /// @notice Compute the parent of two nodes.\\n    /// @param leftNode The left node\\n    /// @param rightNode The right node\\n    /// @return parentNode The parent node\\n    /// @dev Uses assembly for extra performance\\n    function parent(\\n        bytes32 leftNode,\\n        bytes32 rightNode\\n    ) internal pure returns (bytes32 parentNode) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, leftNode)\\n            mstore(0x20, rightNode)\\n            parentNode := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /// @notice Compute the parent level of an array of nodes.\\n    /// @param nodes The array of left-most nodes\\n    /// @param defaultNode The default node after the array\\n    /// @return The left-most nodes of the parent level\\n    /// @dev The default node of a parent level is\\n    /// the parent node of two default nodes.\\n    function parentLevel(\\n        bytes32[] memory nodes,\\n        bytes32 defaultNode\\n    ) internal pure returns (bytes32[] memory) {\\n        uint256 n = (nodes.length + 1) / 2; // ceil(#nodes / 2)\\n        bytes32[] memory level = new bytes32[](n);\\n        for (uint256 i; i < n; ++i) {\\n            bytes32 leftLeaf = nodes[2 * i];\\n            bytes32 rightLeaf = nodes.at(2 * i + 1, defaultNode);\\n            level[i] = parent(leftLeaf, rightLeaf);\\n        }\\n        return level;\\n    }\\n\\n    /// @notice Get the node at some index\\n    /// @param nodes The array of left-most nodes\\n    /// @param index The index of the node\\n    /// @param defaultNode The default node after the array\\n    function at(\\n        bytes32[] memory nodes,\\n        uint256 index,\\n        bytes32 defaultNode\\n    ) internal pure returns (bytes32) {\\n        if (index < nodes.length) {\\n            return nodes[index];\\n        } else {\\n            return defaultNode;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47ec1967c131735784544d1e1610a4eca01d54198411184f5e16c8662c5b63e7\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibOutputValidityProof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\\"../common/CanonicalMachine.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\n\\nimport {LibMerkle32} from \\\"./LibMerkle32.sol\\\";\\n\\nlibrary LibOutputValidityProof {\\n    using LibMerkle32 for bytes32[];\\n\\n    function isSiblingsArrayLengthValid(\\n        OutputValidityProof calldata v\\n    ) internal pure returns (bool) {\\n        return\\n            v.outputHashesSiblings.length == CanonicalMachine.LOG2_MAX_OUTPUTS;\\n    }\\n\\n    function computeClaim(\\n        OutputValidityProof calldata v,\\n        bytes32 outputHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            v.outputHashesSiblings.merkleRootAfterReplacement(\\n                v.outputIndex,\\n                outputHash\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1d56c141256772d513d7b99b8c62e1e04288a0bc7ac9f63bf2d69d8b6f24d56d\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061160a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630e1a07f5146100465780633648bfb514610075578063bd4f121914610088575b600080fd5b6100596100543660046102df565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610325565b610148565b6100596100963660046102df565b6101ef565b600080828686866040516100ae906102ba565b6001600160a01b03938416815292909116602083015260408201526060018190604051809103906000f59050801580156100ec573d6000803e3d6000fd5b50604080516001600160a01b03888116825260208201889052838116828401529151929350908816917fe73165c2d277daf8713fd08b40845cb6bb7a20b2b543f3d35324a475660fcebd9181900360600190a295945050505050565b60008084848460405161015a906102ba565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610194573d6000803e3d6000fd5b50604080516001600160a01b03878116825260208201879052838116828401529151929350908716917fe73165c2d277daf8713fd08b40845cb6bb7a20b2b543f3d35324a475660fcebd9181900360600190a2949350505050565b60006102738260405180602001610205906102ba565b601f1982820381018352601f9091011660408181526001600160a01b038a811660208401528916908201526060810187905260800160408051601f19818403018152908290526102589291602001610396565b6040516020818303038152906040528051906020012061027c565b95945050505050565b6000610289838330610290565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b611221806103b483390190565b6001600160a01b03811681146102dc57600080fd5b50565b600080600080608085870312156102f557600080fd5b8435610300816102c7565b93506020850135610310816102c7565b93969395505050506040820135916060013590565b60008060006060848603121561033a57600080fd5b8335610345816102c7565b92506020840135610355816102c7565b929592945050506040919091013590565b6000815160005b81811015610387576020818501810151868301520161036d565b50600093019283525090919050565b60006103ab6103a58386610366565b84610366565b94935050505056fe60a060405234801561001057600080fd5b5060405161122138038061122183398101604081905261002f916100fd565b816001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610095565b506001805560805250600380546001600160a01b0319166001600160a01b0392909216919091179055610140565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100fa57600080fd5b50565b60008060006060848603121561011257600080fd5b835161011d816100e5565b602085015190935061012e816100e5565b80925050604084015190509250925092565b6080516110c661015b60003960006101ec01526110c66000f3fe6080604052600436106100e15760003560e01c806371891db01161007f578063e88d39c011610059578063e88d39c014610294578063f23a6e61146102b4578063f2fde38b146102e0578063fc4116831461030057600080fd5b806371891db01461022a5780638da5cb5b1461024a578063bc197c811461026857600080fd5b8063179e740b116100bb578063179e740b1461018857806333137b76146101ba57806361b12c66146101da578063715018a61461021557600080fd5b806301ffc9a7146100ed57806308eb89ab14610122578063150b7a021461014457600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610a28565b610320565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061014261013d366004610a6a565b610357565b005b34801561015057600080fd5b5061016f61015f366004610b7a565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610119565b34801561019457600080fd5b506003546001600160a01b03165b6040516001600160a01b039091168152602001610119565b3480156101c657600080fd5b506101426101d5366004610be5565b6103be565b3480156101e657600080fd5b506040517f00000000000000000000000000000000000000000000000000000000000000008152602001610119565b34801561022157600080fd5b5061014261059b565b34801561023657600080fd5b5061010d610245366004610c78565b6105a5565b34801561025657600080fd5b506000546001600160a01b03166101a2565b34801561027457600080fd5b5061016f610283366004610d10565b63bc197c8160e01b95945050505050565b3480156102a057600080fd5b506101426102af366004610be5565b6105c8565b3480156102c057600080fd5b5061016f6102cf366004610dbd565b63f23a6e6160e01b95945050505050565b3480156102ec57600080fd5b506101426102fb366004610e25565b6105e9565b34801561030c57600080fd5b5061014261031b366004610e25565b6105f5565b60006001600160e01b03198216630271189760e51b148061035157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61036081610651565b61037d57604051635d2c5e9b60e11b815260040160405180910390fd5b6000610389828461066c565b9050610394816106a5565b6103b95760405163506b919d60e11b8152600481018290526024015b60405180910390fd5b505050565b6103c6610719565b6103d18383836105c8565b60006103e06020830183610e42565b90506004831015610408578383604051636942600f60e11b81526004016103b0929190610e94565b60006104176004828688610eb0565b61042091610eda565b9050366000610432866004818a610eb0565b909250905063dc857e9160e01b6001600160e01b03198416016104a55766ffffffffffffff600885901c16600090815260026020526040902054600160ff86161b1615610496578686604051637b97a6bb60e01b81526004016103b0929190610e94565b6104a08282610743565b61052b565b63efcde17560e01b6001600160e01b031984160161050e5766ffffffffffffff600885901c16600090815260026020526040902054600160ff86161b1615610504578686604051637b97a6bb60e01b81526004016103b0929190610e94565b6104a08282610776565b8686604051636942600f60e11b81526004016103b0929190610e94565b66ffffffffffffff600885901c1660009081526002602052604090208054600160ff87161b1790557fcad1f361c6e84664e892230291c8e8eb9555683e0a6a5ce8ea7b204ac0ac367684888860405161058693929190610f0a565b60405180910390a1505050506103b960018055565b6105a36107a4565b565b600881901c600090815260026020526040812054600160ff84161b161515610351565b6103b983836040516105db929190610f36565b604051809103902082610357565b6105f2816107b6565b50565b6105fd6107f1565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f4991c6f37185659e276ff918a96f3e20e6c5abcd8c9aab450dc19c2f7ad35cb59060200160405180910390a150565b6000603f6106626020840184610f46565b9050149050919050565b600061069e61067e6020850185610e42565b6001600160401b0316836106956020870187610f46565b9092909161081e565b9392505050565b600354604051639618f35b60e01b8152306004820152602481018390526000916001600160a01b031690639618f35b90604401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610f96565b60026001540361073c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080606061075484860186610fb8565b9194509250905061076f6001600160a01b03841683836108df565b5050505050565b6000606061078683850185611006565b909250905061079e6001600160a01b03831682610952565b50505050565b6107ac6107f1565b6105a360006109c2565b6107be6107f1565b6001600160a01b0381166107e857604051631e4fbdf760e01b8152600060048201526024016103b0565b6105f2816109c2565b6000546001600160a01b031633146105a35760405163118cdaa760e01b81523360048201526024016103b0565b600083815b8181101561088657600087878381811061083f5761083f61104b565b905060200201359050856001166000036108685760008581526020829052604090209450610879565b600081815260208690526040902094505b50600194851c9401610823565b5083156108d55760405162461bcd60e51b815260206004820181905260248201527f4c69624d65726b6c6533323a20696e646578206f7574206f6620626f756e647360448201526064016103b0565b5090949350505050565b60006060846001600160a01b031684846040516108fc9190611061565b60006040518083038185875af1925050503d8060008114610939576040519150601f19603f3d011682016040523d82523d6000602084013e61093e565b606091505b5090925090508161076f5761076f81610a12565b60006060836001600160a01b03168360405161096e9190611061565b600060405180830381855af49150503d80600081146109a9576040519150601f19603f3d011682016040523d82523d6000602084013e6109ae565b606091505b5090925090508161079e5761079e81610a12565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600003610a2057600080fd5b805181602001fd5b600060208284031215610a3a57600080fd5b81356001600160e01b03198116811461069e57600080fd5b600060408284031215610a6457600080fd5b50919050565b60008060408385031215610a7d57600080fd5b8235915060208301356001600160401b03811115610a9a57600080fd5b610aa685828601610a52565b9150509250929050565b6001600160a01b03811681146105f257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610b0357610b03610ac5565b604052919050565b600082601f830112610b1c57600080fd5b81356001600160401b03811115610b3557610b35610ac5565b610b48601f8201601f1916602001610adb565b818152846020838601011115610b5d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610b9057600080fd5b8435610b9b81610ab0565b93506020850135610bab81610ab0565b92506040850135915060608501356001600160401b03811115610bcd57600080fd5b610bd987828801610b0b565b91505092959194509250565b600080600060408486031215610bfa57600080fd5b83356001600160401b0380821115610c1157600080fd5b818601915086601f830112610c2557600080fd5b813581811115610c3457600080fd5b876020828501011115610c4657600080fd5b602092830195509350908501359080821115610c6157600080fd5b50610c6e86828701610a52565b9150509250925092565b600060208284031215610c8a57600080fd5b5035919050565b600082601f830112610ca257600080fd5b813560206001600160401b03821115610cbd57610cbd610ac5565b8160051b610ccc828201610adb565b9283528481018201928281019087851115610ce657600080fd5b83870192505b84831015610d0557823582529183019190830190610cec565b979650505050505050565b600080600080600060a08688031215610d2857600080fd5b8535610d3381610ab0565b94506020860135610d4381610ab0565b935060408601356001600160401b0380821115610d5f57600080fd5b610d6b89838a01610c91565b94506060880135915080821115610d8157600080fd5b610d8d89838a01610c91565b93506080880135915080821115610da357600080fd5b50610db088828901610b0b565b9150509295509295909350565b600080600080600060a08688031215610dd557600080fd5b8535610de081610ab0565b94506020860135610df081610ab0565b9350604086013592506060860135915060808601356001600160401b03811115610e1957600080fd5b610db088828901610b0b565b600060208284031215610e3757600080fd5b813561069e81610ab0565b600060208284031215610e5457600080fd5b81356001600160401b038116811461069e57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610ea8602083018486610e6b565b949350505050565b60008085851115610ec057600080fd5b83861115610ecd57600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610f025780818660040360031b1b83161692505b505092915050565b6001600160401b0384168152604060208201526000610f2d604083018486610e6b565b95945050505050565b8183823760009101908152919050565b6000808335601e19843603018112610f5d57600080fd5b8301803591506001600160401b03821115610f7757600080fd5b6020019150600581901b3603821315610f8f57600080fd5b9250929050565b600060208284031215610fa857600080fd5b8151801515811461069e57600080fd5b600080600060608486031215610fcd57600080fd5b8335610fd881610ab0565b92506020840135915060408401356001600160401b03811115610ffa57600080fd5b610c6e86828701610b0b565b6000806040838503121561101957600080fd5b823561102481610ab0565b915060208301356001600160401b0381111561103f57600080fd5b610aa685828601610b0b565b634e487b7160e01b600052603260045260246000fd5b6000825160005b818110156110825760208186018101518583015201611068565b50600092019182525091905056fea26469706673582212203f315ffa1b40cea7dff22d84a4da91a7608e3e91ce7edcfdf33bec1516bcd4a264736f6c63430008170033a26469706673582212208c4a52f54de2f4ddae6d92bbdbe5a6efa1298a6912df6cab98cca337ff99a72264736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630e1a07f5146100465780633648bfb514610075578063bd4f121914610088575b600080fd5b6100596100543660046102df565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610325565b610148565b6100596100963660046102df565b6101ef565b600080828686866040516100ae906102ba565b6001600160a01b03938416815292909116602083015260408201526060018190604051809103906000f59050801580156100ec573d6000803e3d6000fd5b50604080516001600160a01b03888116825260208201889052838116828401529151929350908816917fe73165c2d277daf8713fd08b40845cb6bb7a20b2b543f3d35324a475660fcebd9181900360600190a295945050505050565b60008084848460405161015a906102ba565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610194573d6000803e3d6000fd5b50604080516001600160a01b03878116825260208201879052838116828401529151929350908716917fe73165c2d277daf8713fd08b40845cb6bb7a20b2b543f3d35324a475660fcebd9181900360600190a2949350505050565b60006102738260405180602001610205906102ba565b601f1982820381018352601f9091011660408181526001600160a01b038a811660208401528916908201526060810187905260800160408051601f19818403018152908290526102589291602001610396565b6040516020818303038152906040528051906020012061027c565b95945050505050565b6000610289838330610290565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b611221806103b483390190565b6001600160a01b03811681146102dc57600080fd5b50565b600080600080608085870312156102f557600080fd5b8435610300816102c7565b93506020850135610310816102c7565b93969395505050506040820135916060013590565b60008060006060848603121561033a57600080fd5b8335610345816102c7565b92506020840135610355816102c7565b929592945050506040919091013590565b6000815160005b81811015610387576020818501810151868301520161036d565b50600093019283525090919050565b60006103ab6103a58386610366565b84610366565b94935050505056fe60a060405234801561001057600080fd5b5060405161122138038061122183398101604081905261002f916100fd565b816001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610095565b506001805560805250600380546001600160a01b0319166001600160a01b0392909216919091179055610140565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100fa57600080fd5b50565b60008060006060848603121561011257600080fd5b835161011d816100e5565b602085015190935061012e816100e5565b80925050604084015190509250925092565b6080516110c661015b60003960006101ec01526110c66000f3fe6080604052600436106100e15760003560e01c806371891db01161007f578063e88d39c011610059578063e88d39c014610294578063f23a6e61146102b4578063f2fde38b146102e0578063fc4116831461030057600080fd5b806371891db01461022a5780638da5cb5b1461024a578063bc197c811461026857600080fd5b8063179e740b116100bb578063179e740b1461018857806333137b76146101ba57806361b12c66146101da578063715018a61461021557600080fd5b806301ffc9a7146100ed57806308eb89ab14610122578063150b7a021461014457600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610a28565b610320565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061014261013d366004610a6a565b610357565b005b34801561015057600080fd5b5061016f61015f366004610b7a565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610119565b34801561019457600080fd5b506003546001600160a01b03165b6040516001600160a01b039091168152602001610119565b3480156101c657600080fd5b506101426101d5366004610be5565b6103be565b3480156101e657600080fd5b506040517f00000000000000000000000000000000000000000000000000000000000000008152602001610119565b34801561022157600080fd5b5061014261059b565b34801561023657600080fd5b5061010d610245366004610c78565b6105a5565b34801561025657600080fd5b506000546001600160a01b03166101a2565b34801561027457600080fd5b5061016f610283366004610d10565b63bc197c8160e01b95945050505050565b3480156102a057600080fd5b506101426102af366004610be5565b6105c8565b3480156102c057600080fd5b5061016f6102cf366004610dbd565b63f23a6e6160e01b95945050505050565b3480156102ec57600080fd5b506101426102fb366004610e25565b6105e9565b34801561030c57600080fd5b5061014261031b366004610e25565b6105f5565b60006001600160e01b03198216630271189760e51b148061035157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61036081610651565b61037d57604051635d2c5e9b60e11b815260040160405180910390fd5b6000610389828461066c565b9050610394816106a5565b6103b95760405163506b919d60e11b8152600481018290526024015b60405180910390fd5b505050565b6103c6610719565b6103d18383836105c8565b60006103e06020830183610e42565b90506004831015610408578383604051636942600f60e11b81526004016103b0929190610e94565b60006104176004828688610eb0565b61042091610eda565b9050366000610432866004818a610eb0565b909250905063dc857e9160e01b6001600160e01b03198416016104a55766ffffffffffffff600885901c16600090815260026020526040902054600160ff86161b1615610496578686604051637b97a6bb60e01b81526004016103b0929190610e94565b6104a08282610743565b61052b565b63efcde17560e01b6001600160e01b031984160161050e5766ffffffffffffff600885901c16600090815260026020526040902054600160ff86161b1615610504578686604051637b97a6bb60e01b81526004016103b0929190610e94565b6104a08282610776565b8686604051636942600f60e11b81526004016103b0929190610e94565b66ffffffffffffff600885901c1660009081526002602052604090208054600160ff87161b1790557fcad1f361c6e84664e892230291c8e8eb9555683e0a6a5ce8ea7b204ac0ac367684888860405161058693929190610f0a565b60405180910390a1505050506103b960018055565b6105a36107a4565b565b600881901c600090815260026020526040812054600160ff84161b161515610351565b6103b983836040516105db929190610f36565b604051809103902082610357565b6105f2816107b6565b50565b6105fd6107f1565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f4991c6f37185659e276ff918a96f3e20e6c5abcd8c9aab450dc19c2f7ad35cb59060200160405180910390a150565b6000603f6106626020840184610f46565b9050149050919050565b600061069e61067e6020850185610e42565b6001600160401b0316836106956020870187610f46565b9092909161081e565b9392505050565b600354604051639618f35b60e01b8152306004820152602481018390526000916001600160a01b031690639618f35b90604401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610f96565b60026001540361073c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080606061075484860186610fb8565b9194509250905061076f6001600160a01b03841683836108df565b5050505050565b6000606061078683850185611006565b909250905061079e6001600160a01b03831682610952565b50505050565b6107ac6107f1565b6105a360006109c2565b6107be6107f1565b6001600160a01b0381166107e857604051631e4fbdf760e01b8152600060048201526024016103b0565b6105f2816109c2565b6000546001600160a01b031633146105a35760405163118cdaa760e01b81523360048201526024016103b0565b600083815b8181101561088657600087878381811061083f5761083f61104b565b905060200201359050856001166000036108685760008581526020829052604090209450610879565b600081815260208690526040902094505b50600194851c9401610823565b5083156108d55760405162461bcd60e51b815260206004820181905260248201527f4c69624d65726b6c6533323a20696e646578206f7574206f6620626f756e647360448201526064016103b0565b5090949350505050565b60006060846001600160a01b031684846040516108fc9190611061565b60006040518083038185875af1925050503d8060008114610939576040519150601f19603f3d011682016040523d82523d6000602084013e61093e565b606091505b5090925090508161076f5761076f81610a12565b60006060836001600160a01b03168360405161096e9190611061565b600060405180830381855af49150503d80600081146109a9576040519150601f19603f3d011682016040523d82523d6000602084013e6109ae565b606091505b5090925090508161079e5761079e81610a12565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600003610a2057600080fd5b805181602001fd5b600060208284031215610a3a57600080fd5b81356001600160e01b03198116811461069e57600080fd5b600060408284031215610a6457600080fd5b50919050565b60008060408385031215610a7d57600080fd5b8235915060208301356001600160401b03811115610a9a57600080fd5b610aa685828601610a52565b9150509250929050565b6001600160a01b03811681146105f257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610b0357610b03610ac5565b604052919050565b600082601f830112610b1c57600080fd5b81356001600160401b03811115610b3557610b35610ac5565b610b48601f8201601f1916602001610adb565b818152846020838601011115610b5d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610b9057600080fd5b8435610b9b81610ab0565b93506020850135610bab81610ab0565b92506040850135915060608501356001600160401b03811115610bcd57600080fd5b610bd987828801610b0b565b91505092959194509250565b600080600060408486031215610bfa57600080fd5b83356001600160401b0380821115610c1157600080fd5b818601915086601f830112610c2557600080fd5b813581811115610c3457600080fd5b876020828501011115610c4657600080fd5b602092830195509350908501359080821115610c6157600080fd5b50610c6e86828701610a52565b9150509250925092565b600060208284031215610c8a57600080fd5b5035919050565b600082601f830112610ca257600080fd5b813560206001600160401b03821115610cbd57610cbd610ac5565b8160051b610ccc828201610adb565b9283528481018201928281019087851115610ce657600080fd5b83870192505b84831015610d0557823582529183019190830190610cec565b979650505050505050565b600080600080600060a08688031215610d2857600080fd5b8535610d3381610ab0565b94506020860135610d4381610ab0565b935060408601356001600160401b0380821115610d5f57600080fd5b610d6b89838a01610c91565b94506060880135915080821115610d8157600080fd5b610d8d89838a01610c91565b93506080880135915080821115610da357600080fd5b50610db088828901610b0b565b9150509295509295909350565b600080600080600060a08688031215610dd557600080fd5b8535610de081610ab0565b94506020860135610df081610ab0565b9350604086013592506060860135915060808601356001600160401b03811115610e1957600080fd5b610db088828901610b0b565b600060208284031215610e3757600080fd5b813561069e81610ab0565b600060208284031215610e5457600080fd5b81356001600160401b038116811461069e57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000610ea8602083018486610e6b565b949350505050565b60008085851115610ec057600080fd5b83861115610ecd57600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610f025780818660040360031b1b83161692505b505092915050565b6001600160401b0384168152604060208201526000610f2d604083018486610e6b565b95945050505050565b8183823760009101908152919050565b6000808335601e19843603018112610f5d57600080fd5b8301803591506001600160401b03821115610f7757600080fd5b6020019150600581901b3603821315610f8f57600080fd5b9250929050565b600060208284031215610fa857600080fd5b8151801515811461069e57600080fd5b600080600060608486031215610fcd57600080fd5b8335610fd881610ab0565b92506020840135915060408401356001600160401b03811115610ffa57600080fd5b610c6e86828701610b0b565b6000806040838503121561101957600080fd5b823561102481610ab0565b915060208301356001600160401b0381111561103f57600080fd5b610aa685828601610b0b565b634e487b7160e01b600052603260045260246000fd5b6000825160005b818110156110825760208186018101518583015201611068565b50600092019182525091905056fea26469706673582212203f315ffa1b40cea7dff22d84a4da91a7608e3e91ce7edcfdf33bec1516bcd4a264736f6c63430008170033a26469706673582212208c4a52f54de2f4ddae6d92bbdbe5a6efa1298a6912df6cab98cca337ff99a72264736f6c63430008170033",
  "devdoc": {
    "events": {
      "ApplicationCreated(address,address,bytes32,address)": {
        "details": "MUST be triggered on a successful call to `newApplication`.",
        "params": {
          "appContract": "The application contract",
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "templateHash": "The initial machine state hash"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateApplicationAddress(address,address,bytes32,bytes32)": {
        "details": "Beware that only the `newApplication` function with the `salt` parameter      is able to deterministically deploy an application.",
        "params": {
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "salt": "The salt used to deterministically generate the application contract address",
          "templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The deterministic application contract address"
        }
      },
      "newApplication(address,address,bytes32)": {
        "details": "On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.",
        "params": {
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The application"
        }
      },
      "newApplication(address,address,bytes32,bytes32)": {
        "details": "On success, MUST emit an `ApplicationCreated` event.Reverts if the application owner address is zero.",
        "params": {
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "salt": "The salt used to deterministically generate the application contract address",
          "templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The application"
        }
      }
    },
    "title": "Application Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApplicationCreated(address,address,bytes32,address)": {
        "notice": "A new application was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateApplicationAddress(address,address,bytes32,bytes32)": {
        "notice": "Calculate the address of an application contract to be deployed deterministically."
      },
      "newApplication(address,address,bytes32)": {
        "notice": "Deploy a new application."
      },
      "newApplication(address,address,bytes32,bytes32)": {
        "notice": "Deploy a new application deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `IApplication` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}