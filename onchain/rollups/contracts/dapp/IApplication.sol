// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

pragma solidity ^0.8.8;

import {IERC1155Receiver} from "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

import {IConsensus} from "../consensus/IConsensus.sol";
import {IInputBox} from "../inputs/IInputBox.sol";
import {IInputRelay} from "../inputs/IInputRelay.sol";
import {OutputValidityProof} from "../common/OutputValidityProof.sol";
import {Proof} from "../common/Proof.sol";
import {InputRange} from "../common/InputRange.sol";

/// @notice The base layer incarnation of an application running on the execution layer.
/// @notice The state of the application advances through inputs sent to an `IInputBox` contract (see the `getInputBox` function).
/// @notice These inputs can be sent either directly, or indirectly through input relays (see the `getInputRelays` function).
/// @notice Reader nodes can retrieve inputs sent to the `IInputBox` contract through events, and feed them into the machine.
/// @notice Validator nodes can also submit claims to the `IConsensus` contract (see the `getConsensus` function).
/// @notice Once accepted, claims can be used to validate outputs generated by the machine.
/// @notice Currently, there are two such types of outputs: vouchers and notices.
//  @notice A voucher is a one-time message call to another contract. It can encode asset transfers, approvals,
/// or any other message call that doesn't require Ether to be sent along. A voucher will only be marked as "executed"
/// if the underlying message call succeeds (i.e. does not revert). Furthermore, the return data of
/// the message call is completely discarded. As a protective measure against reentrancy attacks, nested
/// voucher executions are prohibited.
/// @notice A notice, on the other hand, constitutes an arbitrary piece of data that can be proven any number of times.
/// On their own, they don't provoke any type of active interaction with other contracts.
/// Rather, they merely serve to attest off-chain results, e.g. which player won a particular chess match.
/// @notice Every application is subscribed to some consensus, and may be governed by some owner.
/// The consensus has the power to accept claims, which, in turn, are used to validate outputs.
/// Meanwhile, the owner can replace the consensus at any time.
/// Therefore, the users of an application must trust both the consensus and the application owner.
/// @notice There are several ownership models to choose from:
/// - no owner (address zero)
/// - individual signer (externally-owned account)
/// - multiple signers (multi-sig)
/// - DAO (decentralized autonomous organization)
/// - self-owned application (off-chain governance logic)
/// @notice See `IConsensus` for examples of consensus models.
interface IApplication is IERC721Receiver, IERC1155Receiver {
    // Events

    /// @notice MUST trigger when a new consensus is chosen.
    /// @param newConsensus The new consensus
    event NewConsensus(IConsensus newConsensus);

    /// @notice MUST trigger when a voucher is executed.
    /// @param inputIndex The index of the input that emitted the voucher
    /// @param outputIndexWithinInput The index of the voucher amongst all outputs emitted by the input
    event VoucherExecuted(uint256 inputIndex, uint256 outputIndexWithinInput);

    // Errors

    /// @notice Could not validate an output because the input
    /// that generated it is outside the input range of the epoch.
    /// @param inputIndex The input index
    /// @param inputRange The input range
    error InputIndexOutOfRange(uint256 inputIndex, InputRange inputRange);

    // Permissioned functions

    /// @notice Migrate the application to a new consensus.
    /// @param newConsensus The new consensus
    /// @dev Can only be called by the application owner.
    function migrateToConsensus(IConsensus newConsensus) external;

    // Permissionless functions

    /// @notice Try to execute a voucher.
    /// Reverts if the proof is invalid.
    /// Reverts if the voucher was already successfully executed.
    /// Propagates any error raised by the low-level call.
    /// @param destination The address that will receive the payload through a message call
    /// @param payload The payload, which—in the case of Solidity contracts—encodes a function call
    /// @param proof The proof used to validate the voucher against
    ///               a claim submitted by the current consensus contract
    /// @dev On a successful execution, emits a `VoucherExecuted` event.
    function executeVoucher(
        address destination,
        bytes calldata payload,
        Proof calldata proof
    ) external;

    /// @notice Check whether a voucher has been executed.
    /// @param inputIndex The index of the input in the input box
    /// @param outputIndexWithinInput The index of output emitted by the input
    /// @return Whether the voucher has been executed before
    function wasVoucherExecuted(
        uint256 inputIndex,
        uint256 outputIndexWithinInput
    ) external view returns (bool);

    /// @notice Validate a notice.
    /// Reverts if the proof is invalid.
    /// @param notice The notice
    /// @param proof The proof used to validate the notice against
    ///               a claim submitted by the current consensus contract
    function validateNotice(
        bytes calldata notice,
        Proof calldata proof
    ) external view;

    /// @notice Get the application's template hash.
    /// @return The application's template hash
    function getTemplateHash() external view returns (bytes32);

    /// @notice Get the current consensus.
    /// @return The current consensus
    function getConsensus() external view returns (IConsensus);

    /// @notice Get the input box that the application is listening to.
    /// @return The input box
    function getInputBox() external view returns (IInputBox);

    /// @notice Get the input relays that the application expects inputs from.
    /// @return The input relays.
    function getInputRelays() external view returns (IInputRelay[] memory);
}
