// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

pragma solidity ^0.8.8;

import {IERC1155Receiver} from "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

import {IConsensus} from "../consensus/IConsensus.sol";
import {IInputBox} from "../inputs/IInputBox.sol";
import {IInputRelay} from "../inputs/IInputRelay.sol";
import {OutputValidityProof} from "../common/OutputValidityProof.sol";
import {InputRange} from "../common/InputRange.sol";

/// @notice The base layer incarnation of an application running on the execution layer.
/// @notice The state of the application advances through inputs sent to an `IInputBox` contract (see the `getInputBox` function).
/// @notice These inputs can be sent either directly, or indirectly through input relays (see the `getInputRelays` function).
/// @notice Reader nodes can retrieve inputs sent to the `IInputBox` contract through events, and feed them into the machine.
/// @notice Validator nodes can also submit claims to the `IConsensus` contract (see the `getConsensus` function).
/// @notice Once accepted, claims can be used to validate outputs generated by the machine.
/// @notice Some outputs are executable, which means they can have on-chain side effects.
/// @notice Every application is subscribed to some consensus, and may be governed by some owner.
/// The consensus has the power to accept claims, which, in turn, are used to validate outputs.
/// Meanwhile, the owner can replace the consensus at any time.
/// Therefore, the users of an application must trust both the consensus and the application owner.
/// @notice There are several ownership models to choose from:
/// - no owner (address zero)
/// - individual signer (externally-owned account)
/// - multiple signers (multi-sig)
/// - DAO (decentralized autonomous organization)
/// - self-owned application (off-chain governance logic)
/// @notice See `IConsensus` for examples of consensus models.
interface IApplication is IERC721Receiver, IERC1155Receiver {
    // Events

    /// @notice MUST trigger when a new consensus is chosen.
    /// @param newConsensus The new consensus
    event NewConsensus(IConsensus newConsensus);

    /// @notice MUST trigger when an output is executed.
    /// @param inputIndex The index of the input that emitted the output
    /// @param outputIndexWithinInput The index of the output amongst all outputs emitted by the input
    /// @param output The output
    event OutputExecuted(
        uint64 inputIndex,
        uint64 outputIndexWithinInput,
        bytes output
    );

    // Errors

    /// @notice Could not validate an output because the input
    /// that generated it is outside the input range of the epoch.
    /// @param inputIndex The input index
    /// @param inputRange The input range
    error InputIndexOutOfRange(uint256 inputIndex, InputRange inputRange);

    /// @notice Could not execute an output, because the application contract doesn't know how to.
    /// @param output The output
    error OutputNotExecutable(bytes output);

    /// @notice Could not execute an output, because it was already executed.
    /// @param output The output
    error OutputNotReexecutable(bytes output);

    /// @notice Raised when some `OutputValidityProof` variables does not match
    ///         the presented finalized epoch.
    error IncorrectEpochHash();

    /// @notice Raised when `OutputValidityProof` metadata memory range is NOT
    ///         contained in epoch's output memory range.
    error IncorrectOutputsEpochRootHash();

    /// @notice Raised when Merkle root of output hash is NOT contained
    ///         in the output metadata array memory range.
    error IncorrectOutputHashesRootHash();

    // Permissioned functions

    /// @notice Migrate the application to a new consensus.
    /// @param newConsensus The new consensus
    /// @dev Can only be called by the application owner.
    function migrateToConsensus(IConsensus newConsensus) external;

    // Permissionless functions

    /// @notice Execute an output.
    /// @param output The output
    /// @param proof The proof used to validate the output against
    ///              a claim submitted by the current consensus contract
    /// @dev On a successful execution, emits a `OutputExecuted` event.
    /// @dev May raise any of the errors raised by `validateOutput`,
    /// as well as `OutputNotExecutable` and `OutputNotReexecutable`.
    function executeOutput(
        bytes calldata output,
        OutputValidityProof calldata proof
    ) external;

    /// @notice Check whether an output has been executed.
    /// @param inputIndex The index of the input in the input box
    /// @param outputIndexWithinInput The index of output emitted by the input
    /// @return Whether the output has been executed before
    function wasOutputExecuted(
        uint256 inputIndex,
        uint256 outputIndexWithinInput
    ) external view returns (bool);

    /// @notice Validate an output.
    /// @param output The output
    /// @param proof The proof used to validate the output against
    ///              a claim submitted by the current consensus contract
    /// @dev May raise `InputIndexOutOfRange`, `IncorrectEpochHash`,
    /// `IncorrectOutputsEpochRootHash`, or `IncorrectOutputHashesRootHash`.
    function validateOutput(
        bytes calldata output,
        OutputValidityProof calldata proof
    ) external view;

    /// @notice Get the application's template hash.
    /// @return The application's template hash
    function getTemplateHash() external view returns (bytes32);

    /// @notice Get the current consensus.
    /// @return The current consensus
    function getConsensus() external view returns (IConsensus);

    /// @notice Get the input box that the application is listening to.
    /// @return The input box
    function getInputBox() external view returns (IInputBox);

    /// @notice Get the input relays that the application expects inputs from.
    /// @return The input relays.
    function getInputRelays() external view returns (IInputRelay[] memory);
}
